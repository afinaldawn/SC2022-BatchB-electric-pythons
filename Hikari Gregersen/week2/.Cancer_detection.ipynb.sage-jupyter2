{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-a6467881-62ab-4159-a2b8-1896bd49c975.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"Cancer_detection.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657050084820,"exec_count":2,"id":"607b5f","input":"import pandas as pd\nimport numpy as np","kernel":"ds_env","metadata":{"id":"f0O0Zg5xvX1N"},"pos":2,"start":1657050084344,"state":"done","type":"cell"}
{"cell_type":"code","end":1657050128267,"exec_count":7,"id":"bc8738","input":"# Run breast_cancer.info()\nbreast_cancer.info()","kernel":"ds_env","metadata":{"id":"gAPOpEtcz7U2"},"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 569 entries, 0 to 568\nData columns (total 10 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   diagnosis             569 non-null    object \n 1   radius_mean           569 non-null    float64\n 2   area_mean             569 non-null    float64\n 3   compactness_mean      569 non-null    float64\n 4   concavity_mean        569 non-null    float64\n 5   concave points_mean   569 non-null    float64\n 6   symmetry_mean         569 non-null    float64\n 7   area_worst            569 non-null    float64\n 8   concavity_worst       569 non-null    float64\n 9   concave points_worst  569 non-null    float64\ndtypes: float64(9), object(1)\nmemory usage: 44.6+ KB\n"}},"pos":24,"start":1657050128230,"state":"done","type":"cell"}
{"cell_type":"code","end":1657052309387,"exec_count":23,"id":"8e30ee","input":"# Visualization 1 here\nscatm = px.scatter_matrix(breast_cancer, dimensions=['radius_mean', 'area_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'outcome'], color='outcome', title='Breast Cancer Correlation with Means')\nscatm.show()","kernel":"ds_env","metadata":{"id":"zAXnnF9f1Mp-"},"output":{"0":{"data":{"iframe":"eca1d7b213905fa32f0a15d2ca538b54dc1ac239"}}},"pos":33,"start":1657052309267,"state":"done","type":"cell"}
{"cell_type":"code","end":1657052584200,"exec_count":26,"id":"f9b94e","input":"# Visualization 2 here\nscatm2 = px.scatter_matrix(breast_cancer, dimensions=['area_worst', 'concavity_worst',\n       'concave points_worst', 'outcome'], color='outcome', title='Breast Cancer Correlation with Worsts')\nscatm2.show()","kernel":"ds_env","metadata":{"id":"oQXBTNye681E"},"output":{"0":{"data":{"iframe":"a4f61002b255ce9748bc9591e75ba1e5a058063d"}}},"pos":34,"start":1657052584087,"state":"done","type":"cell"}
{"cell_type":"code","end":1657053333934,"exec_count":36,"id":"efd63b","input":"#hint: start with x_train.shape\nx_train.shape\nx_test.shape\ny_train.shape\ny_test.shape","kernel":"ds_env","metadata":{"id":"Ok87vW5k-GTS"},"output":{"0":{"data":{"text/plain":"(456,)"},"exec_count":36}},"pos":41,"start":1657053333899,"state":"done","type":"cell"}
{"cell_type":"code","end":1657053414568,"exec_count":38,"id":"4042e8","input":"#print outputs\nprint(y_train)\nprint(y_test)","kernel":"ds_env","metadata":{"id":"4wMcDBPW9n3C"},"output":{"0":{"name":"stdout","text":"364    0\n553    0\n263    1\n453    0\n354    0\n      ..\n206    0\n44     1\n487    1\n285    0\n102    0\nName: outcome, Length: 113, dtype: uint8\n552    0\n473    0\n406    0\n518    0\n556    0\n      ..\n86     1\n297    1\n284    0\n292    0\n194    1\nName: outcome, Length: 456, dtype: uint8\n"}},"pos":43,"start":1657053414556,"state":"done","type":"cell"}
{"cell_type":"code","end":1657053467122,"exec_count":39,"id":"1fbb7d","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN","kernel":"ds_env","metadata":{"id":"RDDyWqva92IH"},"pos":45,"start":1657053467015,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054196875,"exec_count":47,"id":"e8d3d8","input":"# Creating the KNN model object -- we need to tell it the number of neighbors to look at.\nk = 10 #number of neighbors to look at (look at 7 nearest neighbors)\nmy_KNN_model = KNN(n_neighbors=k)","kernel":"ds_env","metadata":{"id":"GzCrGDYI-4FR"},"pos":47,"start":1657054196853,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054200695,"exec_count":48,"id":"631c9f","input":"my_KNN_model.fit(x_train, y_train) #train the model on our past results x_train (inputs) and y_train (outputs)","kernel":"ds_env","metadata":{"id":"VseIx97TSHQP"},"output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=10)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=10)"},"exec_count":48}},"pos":49,"start":1657054200673,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054208294,"exec_count":49,"id":"a6240c","input":"#make some predictions based on your testing inputs (x_test) using the predict() function\ny_hat = my_KNN_model.predict(x_test)","kernel":"ds_env","metadata":{"id":"CVBaqGOIiEfP"},"pos":51,"start":1657054208250,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054216291,"exec_count":50,"id":"b26b26","input":"y_hat #these are our predictions for our x_test inputs.","kernel":"ds_env","metadata":{"id":"T-ifi-bGj7fx"},"output":{"0":{"data":{"text/plain":"array([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0,\n       0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,\n       1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,\n       0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1,\n       1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n       0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1,\n       1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0,\n       1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0,\n       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n       0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1,\n       0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,\n       0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1,\n       0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], dtype=uint8)"},"exec_count":50}},"pos":52,"start":1657054216153,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054220010,"exec_count":51,"id":"237272","input":"np.array(y_test) #these are what actually happened for our x_test inputs. Do you see some differences?","kernel":"ds_env","metadata":{"id":"TjLu8V3bj8_F"},"output":{"0":{"data":{"text/plain":"array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0,\n       0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,\n       0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1,\n       1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n       0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1,\n       1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0,\n       1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n       0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,\n       0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,\n       0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,\n       0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n       0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0,\n       1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], dtype=uint8)"},"exec_count":51}},"pos":53,"start":1657054219986,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054244086,"exec_count":52,"id":"363567","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","metadata":{"id":"eLFffHy1kFBh"},"output":{"0":{"name":"stdout","text":"0.08552631578947369\n"}},"pos":55,"start":1657054243978,"state":"done","type":"cell"}
{"cell_type":"code","end":1657054250882,"exec_count":53,"id":"ef0cd0","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","metadata":{"id":"WCZLL1wZnfTn"},"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":53},"1":{"data":{"image/png":"37c41b3064ec268265db02f0ceb1abb53cfb7610","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":57,"start":1657054250595,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055606591,"exec_count":69,"id":"3a2ac5","input":"breast_cancer = pd.read_csv(\"https://raw.githubusercontent.com/pkmklong/Breast-Cancer-Wisconsin-Diagnostic-DataSet/master/data.csv\")","kernel":"ds_env","metadata":{"id":"BvK5i4DcvcTg"},"pos":3,"start":1657055606552,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055616074,"exec_count":70,"id":"44e862","input":"# use df.drop to drop Unnamed: 32 and ID, as well as any columns you don't think we should keep track of.\ncols = ['Unnamed: 32', 'id', 'perimeter_mean', 'perimeter_worst', 'texture_mean', 'texture_worst', 'smoothness_worst', 'smoothness_mean', 'symmetry_worst',\n'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_worst',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'radius_worst',\n       'fractal_dimension_se', 'fractal_dimension_mean', 'fractal_dimension_worst']\nbreast_cancer.drop(columns=cols, axis=1, inplace=True)\nbreast_cancer.head()","kernel":"ds_env","metadata":{"id":"GsTMmM8EzBJ9"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>area_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>area_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M</td>\n      <td>17.99</td>\n      <td>1001.0</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>2019.0</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>20.57</td>\n      <td>1326.0</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>1956.0</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M</td>\n      <td>19.69</td>\n      <td>1203.0</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>1709.0</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M</td>\n      <td>11.42</td>\n      <td>386.1</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>567.7</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M</td>\n      <td>20.29</td>\n      <td>1297.0</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>1575.0</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  diagnosis  radius_mean  area_mean  compactness_mean  concavity_mean  \\\n0         M        17.99     1001.0           0.27760          0.3001   \n1         M        20.57     1326.0           0.07864          0.0869   \n2         M        19.69     1203.0           0.15990          0.1974   \n3         M        11.42      386.1           0.28390          0.2414   \n4         M        20.29     1297.0           0.13280          0.1980   \n\n   concave points_mean  symmetry_mean  area_worst  concavity_worst  \\\n0              0.14710         0.2419      2019.0           0.7119   \n1              0.07017         0.1812      1956.0           0.2416   \n2              0.12790         0.2069      1709.0           0.4504   \n3              0.10520         0.2597       567.7           0.6869   \n4              0.10430         0.1809      1575.0           0.4000   \n\n   concave points_worst  \n0                0.2654  \n1                0.1860  \n2                0.2430  \n3                0.2575  \n4                0.1625  "},"exec_count":70}},"pos":17,"start":1657055616019,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055621317,"exec_count":71,"id":"5c0867","input":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (15,8))\nsns.heatmap(breast_cancer.corr(),annot=True,cmap='YlGnBu')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":71},"1":{"data":{"image/png":"72ae6145450ec271780d06ef6355b63de9441845","text/plain":"<Figure size 1080x576 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":19,"start":1657055620365,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055624944,"exec_count":72,"id":"cd4392","input":"# drop any n/a values remaining! Remember inplace!\nbreast_cancer.dropna(inplace=True)\nbreast_cancer.reset_index(drop=True, inplace=True)","kernel":"ds_env","metadata":{"id":"H7H0OTAhzoKQ"},"pos":21,"start":1657055624907,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055626556,"exec_count":73,"id":"3fd0c0","input":"# print the last five rows of your dataframe \nbreast_cancer.tail()","kernel":"ds_env","metadata":{"id":"tL-d7BNRzz_V"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>area_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>area_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>564</th>\n      <td>M</td>\n      <td>21.56</td>\n      <td>1479.0</td>\n      <td>0.11590</td>\n      <td>0.24390</td>\n      <td>0.13890</td>\n      <td>0.1726</td>\n      <td>2027.0</td>\n      <td>0.4107</td>\n      <td>0.2216</td>\n    </tr>\n    <tr>\n      <th>565</th>\n      <td>M</td>\n      <td>20.13</td>\n      <td>1261.0</td>\n      <td>0.10340</td>\n      <td>0.14400</td>\n      <td>0.09791</td>\n      <td>0.1752</td>\n      <td>1731.0</td>\n      <td>0.3215</td>\n      <td>0.1628</td>\n    </tr>\n    <tr>\n      <th>566</th>\n      <td>M</td>\n      <td>16.60</td>\n      <td>858.1</td>\n      <td>0.10230</td>\n      <td>0.09251</td>\n      <td>0.05302</td>\n      <td>0.1590</td>\n      <td>1124.0</td>\n      <td>0.3403</td>\n      <td>0.1418</td>\n    </tr>\n    <tr>\n      <th>567</th>\n      <td>M</td>\n      <td>20.60</td>\n      <td>1265.0</td>\n      <td>0.27700</td>\n      <td>0.35140</td>\n      <td>0.15200</td>\n      <td>0.2397</td>\n      <td>1821.0</td>\n      <td>0.9387</td>\n      <td>0.2650</td>\n    </tr>\n    <tr>\n      <th>568</th>\n      <td>B</td>\n      <td>7.76</td>\n      <td>181.0</td>\n      <td>0.04362</td>\n      <td>0.00000</td>\n      <td>0.00000</td>\n      <td>0.1587</td>\n      <td>268.6</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    diagnosis  radius_mean  area_mean  compactness_mean  concavity_mean  \\\n564         M        21.56     1479.0           0.11590         0.24390   \n565         M        20.13     1261.0           0.10340         0.14400   \n566         M        16.60      858.1           0.10230         0.09251   \n567         M        20.60     1265.0           0.27700         0.35140   \n568         B         7.76      181.0           0.04362         0.00000   \n\n     concave points_mean  symmetry_mean  area_worst  concavity_worst  \\\n564              0.13890         0.1726      2027.0           0.4107   \n565              0.09791         0.1752      1731.0           0.3215   \n566              0.05302         0.1590      1124.0           0.3403   \n567              0.15200         0.2397      1821.0           0.9387   \n568              0.00000         0.1587       268.6           0.0000   \n\n     concave points_worst  \n564                0.2216  \n565                0.1628  \n566                0.1418  \n567                0.2650  \n568                0.0000  "},"exec_count":73}},"pos":22,"start":1657055626539,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055634467,"exec_count":74,"id":"c15bcc","input":"dummies = pd.get_dummies(breast_cancer[\"diagnosis\"])\ndummies.head()","kernel":"ds_env","metadata":{"id":"k2w_QD0e3-WY"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B</th>\n      <th>M</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   B  M\n0  0  1\n1  0  1\n2  0  1\n3  0  1\n4  0  1"},"exec_count":74}},"pos":26,"start":1657055634449,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055644338,"exec_count":75,"id":"646f54","input":"breast_cancer[\"outcome\"] = dummies[\"M\"] # 1 = malignant\nbreast_cancer.head()","kernel":"ds_env","metadata":{"id":"QtT1BaBF5M3V"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>area_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>area_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M</td>\n      <td>17.99</td>\n      <td>1001.0</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>2019.0</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>20.57</td>\n      <td>1326.0</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>1956.0</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M</td>\n      <td>19.69</td>\n      <td>1203.0</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>1709.0</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M</td>\n      <td>11.42</td>\n      <td>386.1</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>567.7</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M</td>\n      <td>20.29</td>\n      <td>1297.0</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>1575.0</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  diagnosis  radius_mean  area_mean  compactness_mean  concavity_mean  \\\n0         M        17.99     1001.0           0.27760          0.3001   \n1         M        20.57     1326.0           0.07864          0.0869   \n2         M        19.69     1203.0           0.15990          0.1974   \n3         M        11.42      386.1           0.28390          0.2414   \n4         M        20.29     1297.0           0.13280          0.1980   \n\n   concave points_mean  symmetry_mean  area_worst  concavity_worst  \\\n0              0.14710         0.2419      2019.0           0.7119   \n1              0.07017         0.1812      1956.0           0.2416   \n2              0.12790         0.2069      1709.0           0.4504   \n3              0.10520         0.2597       567.7           0.6869   \n4              0.10430         0.1809      1575.0           0.4000   \n\n   concave points_worst  outcome  \n0                0.2654        1  \n1                0.1860        1  \n2                0.2430        1  \n3                0.2575        1  \n4                0.1625        1  "},"exec_count":75}},"pos":28,"start":1657055644292,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055651024,"exec_count":76,"id":"d5370b","input":"#Drop the 'diagnosis' column from your dataframe. Remember to use inplace if you are changing the dataframe itself!\nbreast_cancer.drop(['diagnosis'], axis=1, inplace=True)","kernel":"ds_env","metadata":{"id":"_e-rGtPu5VIL"},"pos":30,"start":1657055651000,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055659801,"exec_count":77,"id":"b9fd66","input":"import plotly.express as px\nimport numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns","kernel":"ds_env","metadata":{"id":"QtEadcGS3sP3"},"pos":32,"start":1657055659782,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055668966,"exec_count":78,"id":"e77436","input":"# Create a variable named target and set it equal to the [\"outcome\"] column in our breast_cancer dataframe.\ntarget = breast_cancer[\"outcome\"]","kernel":"ds_env","metadata":{"id":"tZOfTkVx8w2K"},"pos":36,"start":1657055668953,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055670559,"exec_count":79,"id":"933942","input":"# Create a variable named input_columns and set it equal to breast_cancer.loc[:, breast_cancer.columns != \"outcome\"]. This means our inputs are every single column except for column!\ninput_columns = breast_cancer.loc[:, breast_cancer.columns != \"outcome\"]","kernel":"ds_env","metadata":{"id":"X6wHkQax9chF"},"pos":37,"start":1657055670550,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055673564,"exec_count":80,"id":"e3c67c","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.8)","kernel":"ds_env","metadata":{"id":"9I03IMDT8tdn"},"pos":39,"start":1657055673452,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055684996,"exec_count":81,"id":"357ba7","input":"from sklearn.svm import SVC\n#Create your model object -- you can go back and change the kernel argument after evaluating your data.\nSVC_model = SVC(kernel = 'linear')","kernel":"ds_env","metadata":{"id":"LW9bLcghmT5d"},"pos":61,"start":1657055684981,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055693249,"exec_count":82,"id":"570e9a","input":"#fit your model\nSVC_model.fit(x_train, y_train)","kernel":"ds_env","metadata":{"id":"cu2cA4YBqrNL"},"output":{"0":{"data":{"text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>","text/plain":"SVC(kernel='linear')"},"exec_count":82}},"pos":63,"start":1657055692264,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055695307,"exec_count":83,"id":"0085e0","input":"#create some predictions on your testing inputs and set them equal to y_hat.\ny_hat = SVC_model.predict(x_test)\ny_hat","kernel":"ds_env","metadata":{"id":"Hkrx7foxsuNZ"},"output":{"0":{"data":{"text/plain":"array([0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,\n       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0,\n       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n       0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,\n       0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n       0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,\n       1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n       0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,\n       0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1,\n       0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\n       1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0,\n       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,\n       0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], dtype=uint8)"},"exec_count":83}},"pos":65,"start":1657055695263,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055716604,"exec_count":85,"id":"e4e986","input":"#Compute your MSE.\ntotal_squared_error = (np.sum((y_test - y_hat)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","kernel":"ds_env","metadata":{"id":"zz8OFQxFs8N0"},"output":{"0":{"name":"stdout","text":"0.07675438596491228\n"}},"pos":67,"start":1657055716581,"state":"done","type":"cell"}
{"cell_type":"code","end":1657055734260,"exec_count":86,"id":"4f3aff","input":"#Create a confusion matrix\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","metadata":{"id":"Xlm2k_-otFgI"},"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":86},"1":{"data":{"image/png":"6a2e1887dc8595537fdd2ade377be4a89ccc847d","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":69,"start":1657055733534,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5a88bf","input":"# explore anything else you are interested in here\n","metadata":{"id":"lFnrZickyynD"},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cb954d","input":"#have fun!","metadata":{"id":"CC0NmaY7v7_K"},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"4fff19","input":"# Figure out how many rows are malignant and how many are benign. Hint: use the .count() function!\nbreast_cancer[breast_cancer[\"diagnosis\"]==\"M\"].count()","metadata":{"id":"0tYK-EaL0g8y"},"output":{"0":{"data":{"text/plain":"id                         212\ndiagnosis                  212\nradius_mean                212\ntexture_mean               212\nperimeter_mean             212\narea_mean                  212\nsmoothness_mean            212\ncompactness_mean           212\nconcavity_mean             212\nconcave points_mean        212\nsymmetry_mean              212\nfractal_dimension_mean     212\nradius_se                  212\ntexture_se                 212\nperimeter_se               212\narea_se                    212\nsmoothness_se              212\ncompactness_se             212\nconcavity_se               212\nconcave points_se          212\nsymmetry_se                212\nfractal_dimension_se       212\nradius_worst               212\ntexture_worst              212\nperimeter_worst            212\narea_worst                 212\nsmoothness_worst           212\ncompactness_worst          212\nconcavity_worst            212\nconcave points_worst       212\nsymmetry_worst             212\nfractal_dimension_worst    212\nUnnamed: 32                  0\ndtype: int64"},"exec_count":12,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"1ea23e","input":"breast_cancer['diagnosis'].value_counts().to_frame() # 357 benign and 212 malignant","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>diagnosis</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>B</th>\n      <td>357</td>\n    </tr>\n    <tr>\n      <th>M</th>\n      <td>212</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   diagnosis\nB        357\nM        212"},"exec_count":14,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"daf17b","input":"breast_cancer[breast_cancer[\"diagnosis\"]==\"B\"].count()","output":{"0":{"data":{"text/plain":"id                         357\ndiagnosis                  357\nradius_mean                357\ntexture_mean               357\nperimeter_mean             357\narea_mean                  357\nsmoothness_mean            357\ncompactness_mean           357\nconcavity_mean             357\nconcave points_mean        357\nsymmetry_mean              357\nfractal_dimension_mean     357\nradius_se                  357\ntexture_se                 357\nperimeter_se               357\narea_se                    357\nsmoothness_se              357\ncompactness_se             357\nconcavity_se               357\nconcave points_se          357\nsymmetry_se                357\nfractal_dimension_se       357\nradius_worst               357\ntexture_worst              357\nperimeter_worst            357\narea_worst                 357\nsmoothness_worst           357\ncompactness_worst          357\nconcavity_worst            357\nconcave points_worst       357\nsymmetry_worst             357\nfractal_dimension_worst    357\nUnnamed: 32                  0\ndtype: int64"},"exec_count":15,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"be6c14","input":"breast_cancer.columns","output":{"0":{"data":{"text/plain":"Index(['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32'],\n      dtype='object')"},"exec_count":17,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"257d0e","input":"# print first five rows of breast_cancer\nbreast_cancer.head()","metadata":{"id":"B5QnmTysxcJT"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>Unnamed: 32</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>842302</td>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>...</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>842517</td>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>...</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>84300903</td>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>...</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>84348301</td>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>...</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84358402</td>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>...</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 33 columns</p>\n</div>","text/plain":"         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n0    842302         M        17.99         10.38          122.80     1001.0   \n1    842517         M        20.57         17.77          132.90     1326.0   \n2  84300903         M        19.69         21.25          130.00     1203.0   \n3  84348301         M        11.42         20.38           77.58      386.1   \n4  84358402         M        20.29         14.34          135.10     1297.0   \n\n   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0          0.11840           0.27760          0.3001              0.14710   \n1          0.08474           0.07864          0.0869              0.07017   \n2          0.10960           0.15990          0.1974              0.12790   \n3          0.14250           0.28390          0.2414              0.10520   \n4          0.10030           0.13280          0.1980              0.10430   \n\n   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n0  ...          17.33           184.60      2019.0            0.1622   \n1  ...          23.41           158.80      1956.0            0.1238   \n2  ...          25.53           152.50      1709.0            0.1444   \n3  ...          26.50            98.87       567.7            0.2098   \n4  ...          16.67           152.20      1575.0            0.1374   \n\n   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n0             0.6656           0.7119                0.2654          0.4601   \n1             0.1866           0.2416                0.1860          0.2750   \n2             0.4245           0.4504                0.2430          0.3613   \n3             0.8663           0.6869                0.2575          0.6638   \n4             0.2050           0.4000                0.1625          0.2364   \n\n   fractal_dimension_worst  Unnamed: 32  \n0                  0.11890          NaN  \n1                  0.08902          NaN  \n2                  0.08758          NaN  \n3                  0.17300          NaN  \n4                  0.07678          NaN  \n\n[5 rows x 33 columns]"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"f6fab0","input":"breast_cancer.corr()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>radius_mean</th>\n      <th>area_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>area_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>radius_mean</th>\n      <td>1.000000</td>\n      <td>0.987357</td>\n      <td>0.506124</td>\n      <td>0.676764</td>\n      <td>0.822529</td>\n      <td>0.147741</td>\n      <td>0.941082</td>\n      <td>0.526911</td>\n      <td>0.744214</td>\n    </tr>\n    <tr>\n      <th>area_mean</th>\n      <td>0.987357</td>\n      <td>1.000000</td>\n      <td>0.498502</td>\n      <td>0.685983</td>\n      <td>0.823269</td>\n      <td>0.151293</td>\n      <td>0.959213</td>\n      <td>0.512606</td>\n      <td>0.722017</td>\n    </tr>\n    <tr>\n      <th>compactness_mean</th>\n      <td>0.506124</td>\n      <td>0.498502</td>\n      <td>1.000000</td>\n      <td>0.883121</td>\n      <td>0.831135</td>\n      <td>0.602641</td>\n      <td>0.509604</td>\n      <td>0.816275</td>\n      <td>0.815573</td>\n    </tr>\n    <tr>\n      <th>concavity_mean</th>\n      <td>0.676764</td>\n      <td>0.685983</td>\n      <td>0.883121</td>\n      <td>1.000000</td>\n      <td>0.921391</td>\n      <td>0.500667</td>\n      <td>0.675987</td>\n      <td>0.884103</td>\n      <td>0.861323</td>\n    </tr>\n    <tr>\n      <th>concave points_mean</th>\n      <td>0.822529</td>\n      <td>0.823269</td>\n      <td>0.831135</td>\n      <td>0.921391</td>\n      <td>1.000000</td>\n      <td>0.462497</td>\n      <td>0.809630</td>\n      <td>0.752399</td>\n      <td>0.910155</td>\n    </tr>\n    <tr>\n      <th>symmetry_mean</th>\n      <td>0.147741</td>\n      <td>0.151293</td>\n      <td>0.602641</td>\n      <td>0.500667</td>\n      <td>0.462497</td>\n      <td>1.000000</td>\n      <td>0.177193</td>\n      <td>0.433721</td>\n      <td>0.430297</td>\n    </tr>\n    <tr>\n      <th>area_worst</th>\n      <td>0.941082</td>\n      <td>0.959213</td>\n      <td>0.509604</td>\n      <td>0.675987</td>\n      <td>0.809630</td>\n      <td>0.177193</td>\n      <td>1.000000</td>\n      <td>0.543331</td>\n      <td>0.747419</td>\n    </tr>\n    <tr>\n      <th>concavity_worst</th>\n      <td>0.526911</td>\n      <td>0.512606</td>\n      <td>0.816275</td>\n      <td>0.884103</td>\n      <td>0.752399</td>\n      <td>0.433721</td>\n      <td>0.543331</td>\n      <td>1.000000</td>\n      <td>0.855434</td>\n    </tr>\n    <tr>\n      <th>concave points_worst</th>\n      <td>0.744214</td>\n      <td>0.722017</td>\n      <td>0.815573</td>\n      <td>0.861323</td>\n      <td>0.910155</td>\n      <td>0.430297</td>\n      <td>0.747419</td>\n      <td>0.855434</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                      radius_mean  area_mean  compactness_mean  \\\nradius_mean              1.000000   0.987357          0.506124   \narea_mean                0.987357   1.000000          0.498502   \ncompactness_mean         0.506124   0.498502          1.000000   \nconcavity_mean           0.676764   0.685983          0.883121   \nconcave points_mean      0.822529   0.823269          0.831135   \nsymmetry_mean            0.147741   0.151293          0.602641   \narea_worst               0.941082   0.959213          0.509604   \nconcavity_worst          0.526911   0.512606          0.816275   \nconcave points_worst     0.744214   0.722017          0.815573   \n\n                      concavity_mean  concave points_mean  symmetry_mean  \\\nradius_mean                 0.676764             0.822529       0.147741   \narea_mean                   0.685983             0.823269       0.151293   \ncompactness_mean            0.883121             0.831135       0.602641   \nconcavity_mean              1.000000             0.921391       0.500667   \nconcave points_mean         0.921391             1.000000       0.462497   \nsymmetry_mean               0.500667             0.462497       1.000000   \narea_worst                  0.675987             0.809630       0.177193   \nconcavity_worst             0.884103             0.752399       0.433721   \nconcave points_worst        0.861323             0.910155       0.430297   \n\n                      area_worst  concavity_worst  concave points_worst  \nradius_mean             0.941082         0.526911              0.744214  \narea_mean               0.959213         0.512606              0.722017  \ncompactness_mean        0.509604         0.816275              0.815573  \nconcavity_mean          0.675987         0.884103              0.861323  \nconcave points_mean     0.809630         0.752399              0.910155  \nsymmetry_mean           0.177193         0.433721              0.430297  \narea_worst              1.000000         0.543331              0.747419  \nconcavity_worst         0.543331         1.000000              0.855434  \nconcave points_worst    0.747419         0.855434              1.000000  "},"exec_count":33,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1ccc0e","input":"# print the number of rows in breast_cancer\nlen(breast_cancer.index)","metadata":{"id":"LxELBWOdxsrl"},"output":{"0":{"data":{"text/plain":"569"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d519c8","input":"# print columns of breast_cancer\nbreast_cancer.shape","metadata":{"id":"qQ5KjWIMwGaP"},"output":{"0":{"data":{"text/plain":"(569, 33)"},"exec_count":7,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"0b609d","input":"**TODO:** Now that our outcome column is there, we need to remove the diagnosis column that had the bad data, right? Please do so below.\n","metadata":{"id":"kXUk3fFs5VxV"},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"14c7eb","input":"Do you remember how to fit a model? What parts of our data do we fit/train on? You can go look at the section above for inspiration.","metadata":{"id":"Bk4rua0er_QF"},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"18faf4","input":"ID:\n\ndiagnosis:\n\nradius mean:\n\ntexture mean:\n\nperimeter mean:\n\narea mean:\n\nsmoothness mean:\n\ncompactness mean:\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"19144a","input":"### Code Your Own Machine Learning Model\n\nIt's time for us to create our own classifier. Let's go with an [SVM](https://www.youtube.com/watch?v=_YPScrckx28). We will do the first step for you.\n\nI know it was a lot of information in the last section, but the code is *basically* the same. Since our data is already split, you will follow the same steps to fit your model, make some predictions, evaluate the performance, and visualize your confusion matrix.\n\n","metadata":{"id":"ObvQ_3pPmPBf"},"pos":60,"type":"cell"}
{"cell_type":"markdown","id":"1ad299","input":"### Visualize our data\n\nNow that we've cleaned our data and it is all ready for our model, we should understand some of the relationships. Use your learnings from last week to create two plots -- you can always start with simple [scatter plots](https://plotly.com/python/line-and-scatter/) or maybe a [scatterplot matrix](https://plotly.com/python/splom/). Get creative!\n\n","metadata":{"id":"jhMq9yAj3x78"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"248dd7","input":"**What is this???** I encourage you and your team to read about it here: https://towardsdatascience.com/understanding-confusion-matrix-a9ad42dcfd62. You should define what true positives, true negatives, false positives, and false negatives represent for this scenario. \n\nDiscuss what other  findings you can take away, and talk with your instructor about metrics like accuracy, precision and recall!","metadata":{"id":"mCR5MW5gp0ni"},"pos":58,"type":"cell"}
{"cell_type":"markdown","id":"2c5794","input":"**Ok, we've got our dummy variables. What now?** Now we have to pick one and add it to our dataframe -- we also have to delete the old diagnosis column!\n\n","metadata":{"id":"YXI5tmDd5CKh"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"3589a6","input":"### Splitting the Data\n\nFor every single supervised machine learning problem, we will follow the same flow with `sklearn`:\n\n> *Split, Fit, Predict, and Evaluate.*\n\nWhat is first? Splitting our data into training and testing sets. You can watch a video on why we do that [in the first 36 seconds of this video](https://www.youtube.com/watch?v=_vdMKioCXqQ). \n\nWe will split our data using the [`train_test_split()`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) function on `sklearn` using the same flow as this tutorial: https://realpython.com/train-test-split-python-data/#application-of-train_test_split. The code to do so is below. ","metadata":{"id":"TsxggVkp81js"},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"35f6f1","input":"### Want more?\n\nThere are dozens of models available on SKLearn: https://scikit-learn.org/stable/supervised_learning.html.\n\nYou can try an implement your own below, I recommend starting with logistic regression or random forests :) ","metadata":{"id":"hd9Jqq18wFkd"},"pos":71,"type":"cell"}
{"cell_type":"markdown","id":"41e78a","input":"### Dummy Variables - Preprocessing\nOur target variable (the variable we are trying to predict) is `diagnosis`. Our only problem is that the diagnosis variable will either be an 'M' or a 'B', which is not something our model will understand. We need to change our M's to 1's and B's to 0's so that our model can think like computers do -- using numbers!  \n\nTo do so, we use something called a dummy variable. I'll show you how to do so below. ","metadata":{"id":"c4ocJucC3-p2"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"441415","input":"Compute your MSE below. Is this higher or lower than KNN? Which one would you recommend so far?\n\n","metadata":{"id":"k-ANsXzitBdu"},"pos":66,"type":"cell"}
{"cell_type":"markdown","id":"4a0820","input":"**Creating the model object:**  we need to create an instance of the model. This is like having a model and giving it a nickname so we can remember it, change it, and save it to work custom on our dataset. ","metadata":{"id":"tv1P3go2_U5O"},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"4f50d5","input":"### Step 3: Cleaning our data up!\n\nMaybe there are some columns we don't need. The last column makes zero sense right? Do we need an id column for our purposes? You should drop **any** columns that you feel are not worth keeping track of. \n\nPandas' `drop()` documentation: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop.html. Remember to use `inplace = True` if you are changing your dataframe and note creating a new one!\n\n**Note:** This data is pretty clean! We only need a few lines for this dataset.\n\n","metadata":{"id":"ujuEOdIYyaV8"},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"572021","input":"### Step 1: Imports and Preprocessing\n\nWe need to `import pandas as pd` and read in our data. It is currently a .csv (comma-separated value) file, and we generally use the pd.read_csv() function from pandas to read our data into a dataframe.","metadata":{"id":"m-qQYrLDw0EN"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"5d5010","input":"Amazing, now try changing your kernel and seeing how your results change. You can research what kernels are available here: https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html. If your interested in more ML with SKLearn you should get used to pages like these!","metadata":{"id":"6AyqrZd9v9BR"},"pos":70,"type":"cell"}
{"cell_type":"markdown","id":"638a83","input":"Now, create a confusion matrix! How are the results? Do we end up with more false negatives or false positives?","metadata":{"id":"Ge0IHJ7AtQI2"},"pos":68,"type":"cell"}
{"cell_type":"markdown","id":"685deb","input":"**TODO:** can you look at the shape of the x_train, x_test, y_train, and y_test columns? Why does the shape of these columns make sense? ","metadata":{"id":"rcQ-PJQF9XSA"},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"708cea","input":"**Prediction and Evaluation:** How do we know if our model is actually good? We need to **test** our model by giving it a two-step quiz. \n\nStep 1: We let our model use our testing inputs (`x_test`) to make predictions that guess the whether the patient has benign or malignant tumors (we call these predictions `y_hat`). In this case our `y_hat`'s are a bunch of 1's and 0's that represent whether our model thinks the patient's tumor is benign or malignant. \n\nWe do this by running our model object's `.predict()` function.\n\n","metadata":{"id":"qRJKWrA6hhdf"},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"772042","input":"### Step 2: Do Your Research\n\nThat is a ton of columns. That is a ton of data! Where do we start? \n\nYou should probably do some research on this dataset to find out what the columns mean. I got it on kaggle - you can read about it here: [Wisconsin Breast Cancer Dataset](https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data).\n\n","metadata":{"id":"XjS_4CFYxx52"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"7ce0ec","input":"Now create some predictions and set them equal to `y_hat`. You can look above or google how to make predictions on sklearn if you get confused!","metadata":{"id":"4oAExynzsveF"},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"835005","input":"Step 2 - Evaluation: Here we want to compare `y_hat` to `y_test`. Discuss with your team about why we should do this. \n\nOne we we can compare them is visual inspection. With that said, would you recommend going through by hand and making a tally for every time the one's and zero's don't match up?\n\nPlease don't do this. Please save yourself this nasty headache when we can just do math. Below is a common way to do this, called mean squared error. \n\nTo get mean squared error, we compute the difference between each element in `y_hat` and `y_test` and square it and then get the average of all of that to see how far off we are.","metadata":{"id":"SbywAxezkRN8"},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"a441e6","input":"**The last step!!** We need to change parameters and data to improve our model as we go. If we can make even 1 more correct cancer prediction, it is worth it, right? \n\n**TODO:** Go back and change the value of `k` in the **creating your model object** section and re-run all the code below it. See what changes with your MSE and confusion matrix!","metadata":{"id":"tbo3cueVq7EV"},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"aaecc6","input":"**TODO:** Do you remember how to print the first five rows of a pandas dataframe? How about all of the columns? How about the number of rows? Please do that below and google anything you are unsure about. \n\n","metadata":{"id":"rdwjqFR8xdE2"},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"b0ac9c","input":"### Are you ready to perform machine learning? \n\nDo you think deciding whether a tumor is benign or malignant is classification or regression? Talk with your team for a minute.\n\nEither way, we need to tell our code what our target variable is, and what our input is going to be. <br> **TODO:** Can you do so below?\n\n","metadata":{"id":"EvyKXnr27SaE"},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"b2c8e8","input":"# Who is ready to learn? (Our Machines Are!)\n\nOur task at hand -- building an AI that can save lives.\n\nToday we are going to work to create an AI that can predict whether a breast cancer tumor is benign or malignant. This diagnosis has incredibly important medical implications for those who are diagnosed with breast cancer. \n\nBefore we get started, you should make sure you know what the difference between benign and malignant tumors are and discuss them with your team.\n\n**Hint:** we recommend you heavily refer to your EDA mini project from last week for this activity! ","metadata":{"id":"R9tvKItivlxp"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"bc2c75","input":"**TODO:** at this point, all of our data should be numeric except for our diagnosis column. This is because supervised machine learning models work off of numerical data. Use breast_cancer.info() below to check that all our data besides 'diagnosis' are numeric.","metadata":{"id":"X1yX_YUAz8ti"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"c0ed97","input":"### We have split, now we gotta fit!\nNow that are data is preprocessed (all numerical), and split (80/20 train/test) for machine learning, we can create a model to **classify** whether a patient has malignant (1) or benign (0) breast cancer!\n\nThe first model is a classification model called K Nearest Neighbors. You can watch a video on how K Nearest Neighbors works here: https://www.youtube.com/watch?v=0p0o5cmgLdE.\n\nFirst things first, we need to import our model using SKLearn. You can follow the [guide]( https://scikit-learn.org/stable/auto_examples/neighbors/plot_classification.html#sphx-glr-auto-examples-neighbors-plot-classification-py) here to see how this tutorial works.\n","metadata":{"id":"2lWxo646-Fka"},"pos":44,"type":"cell"}
{"cell_type":"markdown","id":"e7af47","input":"**TODO:** Can you print the outputs with print(y_train) and print(y_test)? What do these 1's and 0's represent?","metadata":{"id":"tY5UwAsS9sCV"},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"ea7d7d","input":"**Not too bad!** MSE represents  the average error (difference) between our model and the correct result. A low mean squared error means that our model makes the correct guess most of the time. \n\nBut we have to think about the nature of the problem. As Data Scientists, do we want to tell someone that we have this average error when we are predicting something as serious as breast cancer? \n\nAnd what does an error mean? Are we telling them they don't have a malignant tumor (y_hat=0) when they actually do (y_test = 1)? Are we telling them they have a tumor (y_hat=1) when they actually don't (y_test = 0)?\n\nWe can get insights on this through a confusion matrix. ","metadata":{"id":"bYj4HCmOmH42"},"pos":56,"type":"cell"}
{"cell_type":"markdown","id":"f0dc34","input":"**TODO:** Can you figure out how many rows are malignant (M) and how many are benign (B)? ","metadata":{"id":"Q8MwFiBX0Zdu"},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"f92400","input":"And there you have it. We have a K Nearest Neighbors model that will look at the 7 nearest neighbors, and gave it a nice nickname, my_KNN_model. <br> <br>\n\n**Fitting (Training) the model object:** **Supervised machine learning** training involves learning from past results (`y_train`) and past inputs (`x_train`). We pass these to our model for learning to teach our model to answer the question \"*based on these inputs, what outputs can we expect?*\"\n<br>\n\nTo do this, we want to let this model learn from our data. We do so by running our model object's `.fit()` function on our training data.","metadata":{"id":"IzQ8yZj5Q0Eg"},"pos":48,"type":"cell"}
{"end":1657050334983,"exec_count":13,"id":"7dfa59","input":"breast_cancer.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>radius_mean</th>\n      <th>area_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>area_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17.99</td>\n      <td>1001.0</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>2019.0</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20.57</td>\n      <td>1326.0</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>1956.0</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19.69</td>\n      <td>1203.0</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>1709.0</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11.42</td>\n      <td>386.1</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>567.7</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20.29</td>\n      <td>1297.0</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>1575.0</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   radius_mean  area_mean  compactness_mean  concavity_mean  \\\n0        17.99     1001.0           0.27760          0.3001   \n1        20.57     1326.0           0.07864          0.0869   \n2        19.69     1203.0           0.15990          0.1974   \n3        11.42      386.1           0.28390          0.2414   \n4        20.29     1297.0           0.13280          0.1980   \n\n   concave points_mean  symmetry_mean  area_worst  concavity_worst  \\\n0              0.14710         0.2419      2019.0           0.7119   \n1              0.07017         0.1812      1956.0           0.2416   \n2              0.12790         0.2069      1709.0           0.4504   \n3              0.10520         0.2597       567.7           0.6869   \n4              0.10430         0.1809      1575.0           0.4000   \n\n   concave points_worst  outcome  \n0                0.2654        1  \n1                0.1860        1  \n2                0.2430        1  \n3                0.2575        1  \n4                0.1625        1  "},"exec_count":13}},"pos":30.5,"start":1657050334952,"state":"done","type":"cell"}
{"end":1657051753609,"exec_count":16,"id":"9e1931","input":"breast_cancer.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['radius_mean', 'area_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'area_worst', 'concavity_worst',\n       'concave points_worst', 'outcome'],\n      dtype='object')"},"exec_count":16}},"pos":32.5,"start":1657051753596,"state":"done","type":"cell"}
{"end":1657052244601,"exec_count":22,"id":"e69882","input":"breast_cancer.corr()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>radius_mean</th>\n      <th>area_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>area_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>radius_mean</th>\n      <td>1.000000</td>\n      <td>0.987357</td>\n      <td>0.506124</td>\n      <td>0.676764</td>\n      <td>0.822529</td>\n      <td>0.147741</td>\n      <td>0.941082</td>\n      <td>0.526911</td>\n      <td>0.744214</td>\n      <td>0.730029</td>\n    </tr>\n    <tr>\n      <th>area_mean</th>\n      <td>0.987357</td>\n      <td>1.000000</td>\n      <td>0.498502</td>\n      <td>0.685983</td>\n      <td>0.823269</td>\n      <td>0.151293</td>\n      <td>0.959213</td>\n      <td>0.512606</td>\n      <td>0.722017</td>\n      <td>0.708984</td>\n    </tr>\n    <tr>\n      <th>compactness_mean</th>\n      <td>0.506124</td>\n      <td>0.498502</td>\n      <td>1.000000</td>\n      <td>0.883121</td>\n      <td>0.831135</td>\n      <td>0.602641</td>\n      <td>0.509604</td>\n      <td>0.816275</td>\n      <td>0.815573</td>\n      <td>0.596534</td>\n    </tr>\n    <tr>\n      <th>concavity_mean</th>\n      <td>0.676764</td>\n      <td>0.685983</td>\n      <td>0.883121</td>\n      <td>1.000000</td>\n      <td>0.921391</td>\n      <td>0.500667</td>\n      <td>0.675987</td>\n      <td>0.884103</td>\n      <td>0.861323</td>\n      <td>0.696360</td>\n    </tr>\n    <tr>\n      <th>concave points_mean</th>\n      <td>0.822529</td>\n      <td>0.823269</td>\n      <td>0.831135</td>\n      <td>0.921391</td>\n      <td>1.000000</td>\n      <td>0.462497</td>\n      <td>0.809630</td>\n      <td>0.752399</td>\n      <td>0.910155</td>\n      <td>0.776614</td>\n    </tr>\n    <tr>\n      <th>symmetry_mean</th>\n      <td>0.147741</td>\n      <td>0.151293</td>\n      <td>0.602641</td>\n      <td>0.500667</td>\n      <td>0.462497</td>\n      <td>1.000000</td>\n      <td>0.177193</td>\n      <td>0.433721</td>\n      <td>0.430297</td>\n      <td>0.330499</td>\n    </tr>\n    <tr>\n      <th>area_worst</th>\n      <td>0.941082</td>\n      <td>0.959213</td>\n      <td>0.509604</td>\n      <td>0.675987</td>\n      <td>0.809630</td>\n      <td>0.177193</td>\n      <td>1.000000</td>\n      <td>0.543331</td>\n      <td>0.747419</td>\n      <td>0.733825</td>\n    </tr>\n    <tr>\n      <th>concavity_worst</th>\n      <td>0.526911</td>\n      <td>0.512606</td>\n      <td>0.816275</td>\n      <td>0.884103</td>\n      <td>0.752399</td>\n      <td>0.433721</td>\n      <td>0.543331</td>\n      <td>1.000000</td>\n      <td>0.855434</td>\n      <td>0.659610</td>\n    </tr>\n    <tr>\n      <th>concave points_worst</th>\n      <td>0.744214</td>\n      <td>0.722017</td>\n      <td>0.815573</td>\n      <td>0.861323</td>\n      <td>0.910155</td>\n      <td>0.430297</td>\n      <td>0.747419</td>\n      <td>0.855434</td>\n      <td>1.000000</td>\n      <td>0.793566</td>\n    </tr>\n    <tr>\n      <th>outcome</th>\n      <td>0.730029</td>\n      <td>0.708984</td>\n      <td>0.596534</td>\n      <td>0.696360</td>\n      <td>0.776614</td>\n      <td>0.330499</td>\n      <td>0.733825</td>\n      <td>0.659610</td>\n      <td>0.793566</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                      radius_mean  area_mean  compactness_mean  \\\nradius_mean              1.000000   0.987357          0.506124   \narea_mean                0.987357   1.000000          0.498502   \ncompactness_mean         0.506124   0.498502          1.000000   \nconcavity_mean           0.676764   0.685983          0.883121   \nconcave points_mean      0.822529   0.823269          0.831135   \nsymmetry_mean            0.147741   0.151293          0.602641   \narea_worst               0.941082   0.959213          0.509604   \nconcavity_worst          0.526911   0.512606          0.816275   \nconcave points_worst     0.744214   0.722017          0.815573   \noutcome                  0.730029   0.708984          0.596534   \n\n                      concavity_mean  concave points_mean  symmetry_mean  \\\nradius_mean                 0.676764             0.822529       0.147741   \narea_mean                   0.685983             0.823269       0.151293   \ncompactness_mean            0.883121             0.831135       0.602641   \nconcavity_mean              1.000000             0.921391       0.500667   \nconcave points_mean         0.921391             1.000000       0.462497   \nsymmetry_mean               0.500667             0.462497       1.000000   \narea_worst                  0.675987             0.809630       0.177193   \nconcavity_worst             0.884103             0.752399       0.433721   \nconcave points_worst        0.861323             0.910155       0.430297   \noutcome                     0.696360             0.776614       0.330499   \n\n                      area_worst  concavity_worst  concave points_worst  \\\nradius_mean             0.941082         0.526911              0.744214   \narea_mean               0.959213         0.512606              0.722017   \ncompactness_mean        0.509604         0.816275              0.815573   \nconcavity_mean          0.675987         0.884103              0.861323   \nconcave points_mean     0.809630         0.752399              0.910155   \nsymmetry_mean           0.177193         0.433721              0.430297   \narea_worst              1.000000         0.543331              0.747419   \nconcavity_worst         0.543331         1.000000              0.855434   \nconcave points_worst    0.747419         0.855434              1.000000   \noutcome                 0.733825         0.659610              0.793566   \n\n                       outcome  \nradius_mean           0.730029  \narea_mean             0.708984  \ncompactness_mean      0.596534  \nconcavity_mean        0.696360  \nconcave points_mean   0.776614  \nsymmetry_mean         0.330499  \narea_worst            0.733825  \nconcavity_worst       0.659610  \nconcave points_worst  0.793566  \noutcome               1.000000  "},"exec_count":22}},"pos":32.4375,"start":1657052244573,"state":"done","type":"cell"}
{"end":1657055699124,"exec_count":84,"id":"a05e55","input":"np.array(y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,\n       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,\n       1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,\n       0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n       0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,\n       1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1,\n       1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1,\n       0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n       0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1,\n       0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0,\n       1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,\n       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0,\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0,\n       0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], dtype=uint8)"},"exec_count":84}},"pos":65.5,"start":1657055699110,"state":"done","type":"cell"}
{"id":0,"time":1657044222154,"type":"user"}
{"last_load":1657050049828,"type":"file"}