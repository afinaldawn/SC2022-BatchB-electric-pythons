{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-4ed82938-9773-456d-881d-dc838a5d610a.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657659145577,"exec_count":6,"id":"1d94eb","input":"from dash import Dash, dcc, html, Input, Output\n","kernel":"ds_env","pos":28,"start":1657659145567,"state":"done","type":"cell"}
{"cell_type":"code","end":1657659148023,"exec_count":7,"id":"843576","input":"import plotly.figure_factory as ff","kernel":"ds_env","pos":29,"start":1657659146983,"state":"done","type":"cell"}
{"cell_type":"code","end":1657659914977,"exec_count":18,"id":"c48d4c","input":"z = [[6,102],\n    [81,0]]","kernel":"ds_env","pos":30,"start":1657659914967,"state":"done","type":"cell"}
{"cell_type":"code","end":1657659916781,"exec_count":19,"id":"66685b","input":"x = ['True', 'False']\ny = ['False', 'True']\n","kernel":"ds_env","pos":31,"start":1657659916773,"state":"done","type":"cell"}
{"cell_type":"code","end":1657659918105,"exec_count":20,"id":"578e15","input":"z_text = [[str(y) for y in x]for x in z]","kernel":"ds_env","pos":32,"start":1657659918097,"state":"done","type":"cell"}
{"cell_type":"code","end":1657659919704,"exec_count":21,"id":"eec9bd","input":"KNNfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text = z_text, colorscale = 'Viridis')\n\nKNNfig.update_layout(title_text='<i><b>K-Nearest Neighbor Confusion Matrix</b></i>')\n\nKNNfig.add_annotation(dict(font=dict(color='black',size=14),\n                       x =0.5,\n                       y = -0.15,\n                       showarrow =False, \n                       text = \"Predicted\",\n                       xref = 'paper', \n                       yref = 'paper'))\n\nKNNfig.add_annotation(dict(font=dict(color='black',size=14),\n                       x = -0.05,\n                       y = 0.5,\n                       showarrow =False, \n                       text = \"Actual\",\n                       textangle = -90,\n                       xref = 'paper',\n                       yref = 'paper'))\n\nKNNfig.update_layout(margin = dict(t=50, l =100))\n\nKNNfig['data'][0]['showscale'] = True\nKNNfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"6c5e2fa0fcb19d89f377da2c42f85405a899a5f7"}}},"pos":33,"start":1657659919675,"state":"done","type":"cell"}
{"cell_type":"code","end":1657660005174,"exec_count":23,"id":"289623","input":"KNNfig.write_html(\"KNN_file.html\")","kernel":"ds_env","pos":34,"start":1657660005136,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0c598a","input":"","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0d6941","input":"","pos":57,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1006ff","input":"","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2d1a85","input":"","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"981bb3","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import DistanceMetric","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e8cc30","input":"","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f2bf40","input":"data = [[81, 0], [6, 102]]\nfig = pximshow(data, x = [\"True Positive\", \"False Positive\"])","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"e67223","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"7bebc5","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"adbe44","input":"from sklearn.neighbors import KNeighborsClassifier as KNN","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"80dd16","input":"knn_parameters = {'weights':('uniform', 'distance'), 'n_neighbors':[1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14, 15], 'algorithm':('auto', 'ball_tree', 'kd_tree', 'brute'), 'p':[1, 2, 3, 4, 5], 'metric': ('minkowski', 'euclidean', 'manhattan', 'chebyshev', 'wminkowski', 'seuclidean', 'mahalanobis') }","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"1998de","input":"knn_gs = GridSearchCV(KNN(), knn_parameters, scoring = 'recall')","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":147,"id":"482b45","input":"xgb_z = [[3, 105], [81, 0]]\nxgb_x = ['Negative', 'Positive']\nxgb_y = ['Positive', 'Negative']\nxgb_z_text = [[str(xgb_y) for xgb_y in xgb_x] for xgb_x in xgb_z]","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":148,"id":"f47f19","input":"xgb_fig = ff.create_annotated_heatmap(xgb_z, x=xgb_x, y=xgb_y, annotation_text=xgb_z_text, colorscale='Viridis')\nxgb_fig.update_layout(title_text='<i><b>Extreme Gradient Boosting Confusion Matrix</b></i>')\nxgb_fig.add_annotation(dict(font=dict(color=\"black\",size=14), x=0.5, y=-0.15, showarrow=False, text=\"Predicted value\", xref=\"paper\", yref=\"paper\"))\nxgb_fig.add_annotation(dict(font=dict(color=\"black\",size=14), x=-0.075, y=0.5, showarrow=False, text=\"Actual value\", textangle=-90, xref=\"paper\", yref=\"paper\"))\nxgb_fig['data'][0]['showscale'] = True\nxgb_fig.show()","output":{"0":{"data":{"iframe":"81be28e8e6082a89dd96878b13f7a2bc2877d862"},"exec_count":148,"output_type":"execute_result"}},"pos":50,"scrolled":false,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"3fc5db","input":"knn_gs.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;metric&#x27;: (&#x27;minkowski&#x27;, &#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                    &#x27;chebyshev&#x27;, &#x27;wminkowski&#x27;, &#x27;seuclidean&#x27;,\n                                    &#x27;mahalanobis&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;metric&#x27;: (&#x27;minkowski&#x27;, &#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                    &#x27;chebyshev&#x27;, &#x27;wminkowski&#x27;, &#x27;seuclidean&#x27;,\n                                    &#x27;mahalanobis&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={'algorithm': ('auto', 'ball_tree', 'kd_tree', 'brute'),\n                         'metric': ('minkowski', 'euclidean', 'manhattan',\n                                    'chebyshev', 'wminkowski', 'seuclidean',\n                                    'mahalanobis'),\n                         'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         'p': [1, 2, 3, 4, 5],\n                         'weights': ('uniform', 'distance')},\n             scoring='recall')"},"exec_count":15,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":159,"id":"153953","input":"sns.heatmap(confusion_matrix(y_test, rf_pred), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":159,"output_type":"execute_result"},"1":{"data":{"image/png":"18a7a173d1ba426f736dc04c15a4719969f727ff","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":159,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":62,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"b13514","input":"knn_gs.best_params_","output":{"0":{"data":{"text/plain":"{'algorithm': 'auto',\n 'metric': 'minkowski',\n 'n_neighbors': 1,\n 'p': 3,\n 'weights': 'uniform'}"},"exec_count":16,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":169,"id":"004ce1","input":"rfc_z = [[6, 102], [81, 0]]\nrfc_x = ['True', 'False']\nrfc_y = ['False', 'True']\nrfc_z_text = [[str(rfc_y) for rfc_y in rfc_x] for rfc_x in rfc_z]","pos":65,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"366536","input":"KNN_Model = KNN(n_neighbors=7, weights='distance')","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":170,"id":"87594a","input":"rfc_fig = ff.create_annotated_heatmap(rfc_z, x=rfc_x, y= rfc_y, annotation_text=rfc_z_text, colorscale='Viridis')\nrfc_fig.update_layout(title_text='<i><b>Random Forest Classifier Confusion Matrix</b></i>')\nrfc_fig.add_annotation(dict(font=dict(color=\"black\",size=14), x=0.5, y=-0.15, showarrow=False, text=\"Predicted value\", xref=\"paper\", yref=\"paper\"))\nrfc_fig.add_annotation(dict(font=dict(color=\"black\",size=14), x=-0.05, y=0.5, showarrow=False, text=\"Actual value\", textangle=-90, xref=\"paper\", yref=\"paper\"))","output":{"0":{"data":{"iframe":"811179b00e904c6ee8a520ce24de4d68a9e7dda4"},"exec_count":170,"output_type":"execute_result"}},"pos":66,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":174,"id":"79adf1","input":"xgb_fig.write_html(\"xgb_cm.html\")","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"f01aab","input":"KNN_Model.fit(x_train,y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7, weights='distance')"},"exec_count":18,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":181,"id":"bf1506","input":"rfc_fig.write_html(\"rfc_fig.html\")\n","pos":67,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"349882","input":"KNN_yhat = KNN_Model.predict(x_test)","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"cb8ddb","input":"df = pd.read_csv('heart.csv')","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"66d7f9","input":"sns.heatmap(confusion_matrix(y_test,KNN_yhat),annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":20,"output_type":"execute_result"},"1":{"data":{"image/png":"894048e4d7e1be6ac103a7d61f33b6343d105dc7","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":20,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"310162","input":"print('Recall score for the KNN model is ' + \nstr(recall_score(y_test,KNN_yhat)))","output":{"0":{"name":"stdout","output_type":"stream","text":"Recall score for the KNN model is 0.9444444444444444\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"5eeeee","input":"from xgboost import XGBClassifier","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"4295cf","input":"xgb_parameters = {'booster':['gblinear', 'gbtree'], 'max_depth':([4, 6, 7 , 8]), 'sampling_method':['uniform', 'gradient_based']}","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"810d5f","input":"xgb_gs = GridSearchCV(XGBClassifier(verbosity = 0), xgb_parameters, scoring = 'recall')\nxgb_gs.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=XGBClassifier(base_score=None, booster=None,\n                                     callbacks=None, colsample_bylevel=None,\n                                     colsample_bynode=None,\n                                     colsample_bytree=None,\n                                     early_stopping_rounds=None,\n                                     enable_categorical=False, eval_metric=None,\n                                     gamma=None, gpu_id=None, grow_policy=None,\n                                     importance_type=None,\n                                     interaction_constraints=None,\n                                     learning_rate=None, max_bin=None,\n                                     max_cat_to_...\n                                     max_delta_step=None, max_depth=None,\n                                     max_leaves=None, min_child_weight=None,\n                                     missing=nan, monotone_constraints=None,\n                                     n_estimators=100, n_jobs=None,\n                                     num_parallel_tree=None, predictor=None,\n                                     random_state=None, reg_alpha=None,\n                                     reg_lambda=None, ...),\n             param_grid={&#x27;booster&#x27;: [&#x27;gblinear&#x27;, &#x27;gbtree&#x27;],\n                         &#x27;max_depth&#x27;: [4, 6, 7, 8],\n                         &#x27;sampling_method&#x27;: [&#x27;uniform&#x27;, &#x27;gradient_based&#x27;]},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=XGBClassifier(base_score=None, booster=None,\n                                     callbacks=None, colsample_bylevel=None,\n                                     colsample_bynode=None,\n                                     colsample_bytree=None,\n                                     early_stopping_rounds=None,\n                                     enable_categorical=False, eval_metric=None,\n                                     gamma=None, gpu_id=None, grow_policy=None,\n                                     importance_type=None,\n                                     interaction_constraints=None,\n                                     learning_rate=None, max_bin=None,\n                                     max_cat_to_...\n                                     max_delta_step=None, max_depth=None,\n                                     max_leaves=None, min_child_weight=None,\n                                     missing=nan, monotone_constraints=None,\n                                     n_estimators=100, n_jobs=None,\n                                     num_parallel_tree=None, predictor=None,\n                                     random_state=None, reg_alpha=None,\n                                     reg_lambda=None, ...),\n             param_grid={&#x27;booster&#x27;: [&#x27;gblinear&#x27;, &#x27;gbtree&#x27;],\n                         &#x27;max_depth&#x27;: [4, 6, 7, 8],\n                         &#x27;sampling_method&#x27;: [&#x27;uniform&#x27;, &#x27;gradient_based&#x27;]},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=XGBClassifier(base_score=None, booster=None,\n                                     callbacks=None, colsample_bylevel=None,\n                                     colsample_bynode=None,\n                                     colsample_bytree=None,\n                                     early_stopping_rounds=None,\n                                     enable_categorical=False, eval_metric=None,\n                                     gamma=None, gpu_id=None, grow_policy=None,\n                                     importance_type=None,\n                                     interaction_constraints=None,\n                                     learning_rate=None, max_bin=None,\n                                     max_cat_to_...\n                                     max_delta_step=None, max_depth=None,\n                                     max_leaves=None, min_child_weight=None,\n                                     missing=nan, monotone_constraints=None,\n                                     n_estimators=100, n_jobs=None,\n                                     num_parallel_tree=None, predictor=None,\n                                     random_state=None, reg_alpha=None,\n                                     reg_lambda=None, ...),\n             param_grid={'booster': ['gblinear', 'gbtree'],\n                         'max_depth': [4, 6, 7, 8],\n                         'sampling_method': ['uniform', 'gradient_based']},\n             scoring='recall')"},"exec_count":24,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"23bcfb","input":"xgb_gs.best_params_","output":{"0":{"data":{"text/plain":"{'booster': 'gbtree', 'max_depth': 6, 'sampling_method': 'uniform'}"},"exec_count":25,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"c0d4e0","input":"xgb_pred = xgb_gs.predict(x_test)","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"11e79e","input":"xgb_gs_updated = XGBClassifier(booster='gbtree', max_depth=6, sampling_method='uniform')\nxgb_gs_updated.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>","text/plain":"XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)"},"exec_count":27,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"93012a","input":"xgb_y_hat = xgb_gs_updated.predict(x_test)\nsns.heatmap(confusion_matrix(y_test, xgb_pred), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":28,"output_type":"execute_result"},"1":{"data":{"image/png":"5dfc5843847f62ce004b2c24c6d44f6ef68768eb","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":28,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"9cdd4c","input":"print('Recall score for the XGB model is ' + \nstr(recall_score(y_test, xgb_pred)))","output":{"0":{"name":"stdout","output_type":"stream","text":"Recall score for the XGB model is 0.9722222222222222\n"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"e4bf0c","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"image/png":"8cd9da890928fbe53f1352b20367944efe4be76d","text/plain":"<Figure size 1080x360 with 1 Axes>"},"exec_count":3,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"25afbb","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"chol\"] < upper_limit]","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"641c8b","input":"import plotly.figure_factory as ff","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"06aefd","input":"from sklearn.ensemble import RandomForestClassifier\nrf_parameters = {'n_estimators':(50, 100), 'bootstrap':(True, False), 'min_samples_leaf':(5, 10), 'oob_score':(True, False), 'warm_start':(True, False)}","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"6748d2","input":"rf_gs = GridSearchCV(RandomForestClassifier(), rf_parameters, scoring = 'recall')\nrf_gs.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={&#x27;bootstrap&#x27;: (True, False),\n                         &#x27;min_samples_leaf&#x27;: (5, 10), &#x27;n_estimators&#x27;: (50, 100),\n                         &#x27;oob_score&#x27;: (True, False),\n                         &#x27;warm_start&#x27;: (True, False)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={&#x27;bootstrap&#x27;: (True, False),\n                         &#x27;min_samples_leaf&#x27;: (5, 10), &#x27;n_estimators&#x27;: (50, 100),\n                         &#x27;oob_score&#x27;: (True, False),\n                         &#x27;warm_start&#x27;: (True, False)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={'bootstrap': (True, False),\n                         'min_samples_leaf': (5, 10), 'n_estimators': (50, 100),\n                         'oob_score': (True, False),\n                         'warm_start': (True, False)},\n             scoring='recall')"},"exec_count":43,"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"3a7ad5","input":"rf_gs.best_params_","output":{"0":{"data":{"text/plain":"{'bootstrap': False,\n 'min_samples_leaf': 5,\n 'n_estimators': 100,\n 'oob_score': False,\n 'warm_start': False}"},"exec_count":44,"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"256a98","input":"rf_gs.best_score_","output":{"0":{"data":{"text/plain":"0.9722468354430379"},"exec_count":45,"output_type":"execute_result"}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"7845dc","input":"rf_pred = rf_gs.predict(x_test)","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"5fc115","input":"recall_score(y_test, rf_pred)","output":{"0":{"data":{"text/plain":"0.9629629629629629"},"exec_count":47,"output_type":"execute_result"}},"pos":63,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"9f67f7","input":"q1 = df.trestbps.quantile(0.25)\nq3 = df.trestbps.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"trestbps\"] < upper_limit]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"461e58","input":"q1 = df.thalach.quantile(0.25)\nq3 = df.thalach.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\ndf=df[df[\"thalach\"] > lower_limit]","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"1886e8","input":"oldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"bdb335","input":"df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>52</td>\n      <td>1</td>\n      <td>0</td>\n      <td>125</td>\n      <td>212</td>\n      <td>0</td>\n      <td>1</td>\n      <td>168</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53</td>\n      <td>1</td>\n      <td>0</td>\n      <td>140</td>\n      <td>203</td>\n      <td>1</td>\n      <td>0</td>\n      <td>155</td>\n      <td>1</td>\n      <td>3.1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>70</td>\n      <td>1</td>\n      <td>0</td>\n      <td>145</td>\n      <td>174</td>\n      <td>0</td>\n      <td>1</td>\n      <td>125</td>\n      <td>1</td>\n      <td>2.6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>61</td>\n      <td>1</td>\n      <td>0</td>\n      <td>148</td>\n      <td>203</td>\n      <td>0</td>\n      <td>1</td>\n      <td>161</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>138</td>\n      <td>294</td>\n      <td>1</td>\n      <td>1</td>\n      <td>106</td>\n      <td>0</td>\n      <td>1.9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n0   52    1   0       125   212    0        1      168      0      1.0      2   \n1   53    1   0       140   203    1        0      155      1      3.1      0   \n2   70    1   0       145   174    0        1      125      1      2.6      0   \n3   61    1   0       148   203    0        1      161      0      0.0      2   \n4   62    0   0       138   294    1        1      106      0      1.9      1   \n\n   ca  thal  target  \n0   2     3       0  \n1   0     3       0  \n2   0     3       0  \n3   1     3       0  \n4   3     2       0  "},"exec_count":8,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":89,"id":"fa51f6","input":"import plotly.figure_factory as ff","pos":64,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"01b1b8","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"19ae43052b5b520a74299204dd994fa6b96836dc","text/plain":"<Figure size 1080x360 with 1 Axes>"},"exec_count":9,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"0dfd33","input":"## Removing Outliers","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"19b7fa","input":"#### K Nearest Neighbor","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"1dcf00","input":"#### Random Forest Classifier\n\n","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"33bd8e","input":"#### Extreme Gradient Boost","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"437795","input":"<u>**Random Forest Classifier**</u>\n\nThe Random Forest Classifier is an algorithm that is a meta estimator that takes a certain number of decision tree classifiers onto various sub\\-samples of a data set, and uses the mean of the results to determine and improve predictive accuracy.\n\n","pos":69,"type":"cell"}
{"cell_type":"markdown","id":"444172","input":"**Talk about how each model performs and which hyperparameters exist for each model** <br>\nn = 7: prevent overfitting <br>\nweights = \"distance\": makes sure data points closer to the data are more relevant to classification <br>\nmetric = \"minkowski\" and p = 2: utilizes Euclidian distance (default) <br>\nalgorithm = \"auto\": will attempt to decide the most appropriate algorithm based on the values passed to fit method. (default) <br>\n\n","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"5cca05","input":"**Talk about how the model works** <br>\nK-Nearest Neighbor is a supervised machine learning algorithm that can be used for classification and regression problems. When a data point is given to the algorithm, it then calculates the distance between the given point to the other data points, mostly using Euclidian distance. The nearest “neighbors'' or data points to the given data point are then sorted by distance in increasing order. The data point is then classified among its “k” nearest neighbors. A small “k” value is more accurate but causes overfitting.\n\n","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"6b0189","input":"<u>Edited Parameters</u>\n\nbooster = 'gbtree':  decides what kind of model is used; gbtree \\(default\\) and dart utilize tree\\-based models while gblinear uses linear ones\n\nmax\\_depth = 6: indicates the depth of the tree, and increasing the value makes the model more complex and increases its chances to overfit \\(0 means no limit and 6 is the default\\)\n\nsampling\\_method = 'uniform': decides how to sample the training instances; uniform makes it so that every instance has an equal probability of being chosen while gradient\\_based made it so that\nthe selection probability would be proportional to the \n\"regularized absolute value of gradients.\"\n\n","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"76486d","input":"## Splitting Data","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"769aa0","input":"<u>**Parameters Used:**</u>\n\nbootstrap \\(False\\): This parameter decides whether bootstrap samples are being used when building the decision trees, when set to False the entire dataset is used to build each tree.\n\nmin\\_samples\\_leaf \\(5\\): The minimum number of samples requried to be at leaf node,  and can result in the effect of smoothing the model. \n\nn\\_estimators \\(50\\): The number of trees in a forest. \n\noob\\_score \\(False\\): whether to use default samples to estimate a score.\n\nwarm\\_start \\(True\\): reuse the solutions of the previous tree call to fit and add more estimators to the ensemble, otherwise, just do a new forest.\n\n","pos":70,"type":"cell"}
{"cell_type":"markdown","id":"d0219f","input":"## Our Models\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"d2f7a3","input":"## Scaling Data","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"f5704d","input":"<u>**Recall Score**</u>\n\nOur recall score is about .935, rounded, and indicates that the number of true positives and negatives are significantly greater than the number of false positives and negatives. The model is detecting over 90% of what it could have predicted correctly, which means it is extremely accurate. \n\n","pos":68,"type":"cell"}
{"cell_type":"markdown","id":"fe5a2f","input":"Extreme Gradient Boosting, or EGB, is a supervised machine learning program that combines many other models, often times weaker models, into its own highly accurate model. EGB is similar to random forest and decision tree models, in the way that each of the models making up EGB makes 1 big tree \nmodel with thousands of trees. EGB converts all categorical data into one\\-hot encoding, which\nbasically means it prepares the data for the algorithm by assigning the categories 1s and 0s.\n\n","pos":52,"type":"cell"}
{"id":0,"time":1657659134132,"type":"user"}
{"last_load":1657645323833,"type":"file"}