{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-4b5f49bb-de82-4407-9e63-46ed808a5476.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657572318815,"exec_count":1,"id":"8e898b","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import DistanceMetric","kernel":"ds_env","no_halt":true,"pos":0,"start":1657572317202,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572318835,"exec_count":2,"id":"c635e7","input":"df = pd.read_csv('heart.csv')","kernel":"ds_env","no_halt":true,"pos":1,"start":1657572318827,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572318861,"exec_count":3,"id":"d5816f","input":"df.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>52</td>\n      <td>1</td>\n      <td>0</td>\n      <td>125</td>\n      <td>212</td>\n      <td>0</td>\n      <td>1</td>\n      <td>168</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53</td>\n      <td>1</td>\n      <td>0</td>\n      <td>140</td>\n      <td>203</td>\n      <td>1</td>\n      <td>0</td>\n      <td>155</td>\n      <td>1</td>\n      <td>3.1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>70</td>\n      <td>1</td>\n      <td>0</td>\n      <td>145</td>\n      <td>174</td>\n      <td>0</td>\n      <td>1</td>\n      <td>125</td>\n      <td>1</td>\n      <td>2.6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>61</td>\n      <td>1</td>\n      <td>0</td>\n      <td>148</td>\n      <td>203</td>\n      <td>0</td>\n      <td>1</td>\n      <td>161</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>138</td>\n      <td>294</td>\n      <td>1</td>\n      <td>1</td>\n      <td>106</td>\n      <td>0</td>\n      <td>1.9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n0   52    1   0       125   212    0        1      168      0      1.0      2   \n1   53    1   0       140   203    1        0      155      1      3.1      0   \n2   70    1   0       145   174    0        1      125      1      2.6      0   \n3   61    1   0       148   203    0        1      161      0      0.0      2   \n4   62    0   0       138   294    1        1      106      0      1.9      1   \n\n   ca  thal  target  \n0   2     3       0  \n1   0     3       0  \n2   0     3       0  \n3   1     3       0  \n4   3     2       0  "},"exec_count":3}},"pos":2,"start":1657572318843,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572318869,"exec_count":4,"id":"4b4f95","input":"#age, sex, thalach using formulas to cal\n# To estimate your maximum age-related heart rate, subtract your age from 220. For example, for a 50-year-old person, the estimated maximum age-related heart rate would be calculated as 220 â€“ 50 years = 170 beats per minute (bpm).","kernel":"ds_env","no_halt":true,"pos":4,"start":1657572318865,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572318879,"exec_count":5,"id":"d0e546","input":"#54, m","kernel":"ds_env","no_halt":true,"pos":5,"start":1657572318875,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572318908,"exec_count":6,"id":"66513f","input":"df_2 = df.groupby(by = ['age', 'sex']).mean().reset_index()\ndf_2[(df_2['sex']==1)& (df_2['age'] ==54)].head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>37</th>\n      <td>54</td>\n      <td>1</td>\n      <td>0.710526</td>\n      <td>127.184211</td>\n      <td>253.552632</td>\n      <td>0.0</td>\n      <td>0.368421</td>\n      <td>139.315789</td>\n      <td>0.394737</td>\n      <td>1.218421</td>\n      <td>1.263158</td>\n      <td>0.736842</td>\n      <td>2.631579</td>\n      <td>0.447368</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    age  sex        cp    trestbps        chol  fbs   restecg     thalach  \\\n37   54    1  0.710526  127.184211  253.552632  0.0  0.368421  139.315789   \n\n       exang   oldpeak     slope        ca      thal    target  \n37  0.394737  1.218421  1.263158  0.736842  2.631579  0.447368  "},"exec_count":6}},"pos":6,"start":1657572318887,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572319128,"exec_count":7,"id":"f3004b","input":"df.chol.describe()\n# 1 = male, 0 = female\ndf1 = df.groupby(by = ['age', 'sex'])['cp', 'trestbps', 'chol', 'fbs', 'restecg', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target'].mean()\ndf_2[(df_2['sex'] == 1) & (df_2['age'] == 54)].reset_index()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>37</td>\n      <td>54</td>\n      <td>1</td>\n      <td>0.710526</td>\n      <td>127.184211</td>\n      <td>253.552632</td>\n      <td>0.0</td>\n      <td>0.368421</td>\n      <td>139.315789</td>\n      <td>0.394737</td>\n      <td>1.218421</td>\n      <td>1.263158</td>\n      <td>0.736842</td>\n      <td>2.631579</td>\n      <td>0.447368</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   index  age  sex        cp    trestbps        chol  fbs   restecg  \\\n0     37   54    1  0.710526  127.184211  253.552632  0.0  0.368421   \n\n      thalach     exang   oldpeak     slope        ca      thal    target  \n0  139.315789  0.394737  1.218421  1.263158  0.736842  2.631579  0.447368  "},"exec_count":7}},"pos":7,"start":1657572318911,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572319162,"exec_count":8,"id":"55d57b","input":"df1","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>age</th>\n      <th>sex</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>29</th>\n      <th>1</th>\n      <td>1.000000</td>\n      <td>130.000000</td>\n      <td>204.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">34</th>\n      <th>0</th>\n      <td>1.000000</td>\n      <td>118.000000</td>\n      <td>210.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.700000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.000000</td>\n      <td>118.000000</td>\n      <td>182.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">35</th>\n      <th>0</th>\n      <td>0.000000</td>\n      <td>138.000000</td>\n      <td>183.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.400000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.363636</td>\n      <td>122.363636</td>\n      <td>218.727273</td>\n      <td>0.000000</td>\n      <td>0.727273</td>\n      <td>0.636364</td>\n      <td>0.581818</td>\n      <td>1.636364</td>\n      <td>0.000000</td>\n      <td>2.636364</td>\n      <td>0.363636</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <th>1</th>\n      <td>0.642857</td>\n      <td>146.285714</td>\n      <td>251.857143</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>2.050000</td>\n      <td>0.928571</td>\n      <td>1.071429</td>\n      <td>2.500000</td>\n      <td>0.214286</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <th>0</th>\n      <td>1.000000</td>\n      <td>124.363636</td>\n      <td>232.909091</td>\n      <td>0.363636</td>\n      <td>0.636364</td>\n      <td>0.000000</td>\n      <td>0.690909</td>\n      <td>1.636364</td>\n      <td>0.909091</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <th>0</th>\n      <td>1.000000</td>\n      <td>120.000000</td>\n      <td>269.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.200000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <th>0</th>\n      <td>2.000000</td>\n      <td>140.000000</td>\n      <td>197.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>1.100000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <th>1</th>\n      <td>0.000000</td>\n      <td>125.000000</td>\n      <td>304.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>73 rows Ã— 11 columns</p>\n</div>","text/plain":"               cp    trestbps        chol       fbs   restecg     exang  \\\nage sex                                                                   \n29  1    1.000000  130.000000  204.000000  0.000000  0.000000  0.000000   \n34  0    1.000000  118.000000  210.000000  0.000000  1.000000  0.000000   \n    1    3.000000  118.000000  182.000000  0.000000  0.000000  0.000000   \n35  0    0.000000  138.000000  183.000000  0.000000  1.000000  0.000000   \n    1    0.363636  122.363636  218.727273  0.000000  0.727273  0.636364   \n...           ...         ...         ...       ...       ...       ...   \n70  1    0.642857  146.285714  251.857143  0.000000  0.500000  0.500000   \n71  0    1.000000  124.363636  232.909091  0.363636  0.636364  0.000000   \n74  0    1.000000  120.000000  269.000000  0.000000  0.000000  1.000000   \n76  0    2.000000  140.000000  197.000000  0.000000  2.000000  0.000000   \n77  1    0.000000  125.000000  304.000000  0.000000  0.000000  1.000000   \n\n          oldpeak     slope        ca      thal    target  \nage sex                                                    \n29  1    0.000000  2.000000  0.000000  2.000000  1.000000  \n34  0    0.700000  2.000000  0.000000  2.000000  1.000000  \n    1    0.000000  2.000000  0.000000  2.000000  1.000000  \n35  0    1.400000  2.000000  0.000000  2.000000  1.000000  \n    1    0.581818  1.636364  0.000000  2.636364  0.363636  \n...           ...       ...       ...       ...       ...  \n70  1    2.050000  0.928571  1.071429  2.500000  0.214286  \n71  0    0.690909  1.636364  0.909091  2.000000  1.000000  \n74  0    0.200000  2.000000  1.000000  2.000000  1.000000  \n76  0    1.100000  1.000000  0.000000  2.000000  1.000000  \n77  1    0.000000  2.000000  3.000000  2.000000  0.000000  \n\n[73 rows x 11 columns]"},"exec_count":8}},"pos":8,"scrolled":true,"start":1657572319137,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572319180,"exec_count":10,"id":"68728b","input":"#function that takes in age and sex and returns a row of the mean data from that groupby df","kernel":"ds_env","no_halt":true,"pos":9,"start":1657572319178,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572319215,"exec_count":11,"id":"155c06","input":"df_mean_data = df.groupby(by = ['age', 'sex']).mean().reset_index()\ndf_mean_data","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>29</td>\n      <td>1</td>\n      <td>1.000000</td>\n      <td>130.000000</td>\n      <td>204.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>202.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>34</td>\n      <td>0</td>\n      <td>1.000000</td>\n      <td>118.000000</td>\n      <td>210.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>192.000000</td>\n      <td>0.000000</td>\n      <td>0.700000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>34</td>\n      <td>1</td>\n      <td>3.000000</td>\n      <td>118.000000</td>\n      <td>182.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>174.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>35</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>138.000000</td>\n      <td>183.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>182.000000</td>\n      <td>0.000000</td>\n      <td>1.400000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>35</td>\n      <td>1</td>\n      <td>0.363636</td>\n      <td>122.363636</td>\n      <td>218.727273</td>\n      <td>0.000000</td>\n      <td>0.727273</td>\n      <td>153.090909</td>\n      <td>0.636364</td>\n      <td>0.581818</td>\n      <td>1.636364</td>\n      <td>0.000000</td>\n      <td>2.636364</td>\n      <td>0.363636</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>70</td>\n      <td>1</td>\n      <td>0.642857</td>\n      <td>146.285714</td>\n      <td>251.857143</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>121.500000</td>\n      <td>0.500000</td>\n      <td>2.050000</td>\n      <td>0.928571</td>\n      <td>1.071429</td>\n      <td>2.500000</td>\n      <td>0.214286</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>71</td>\n      <td>0</td>\n      <td>1.000000</td>\n      <td>124.363636</td>\n      <td>232.909091</td>\n      <td>0.363636</td>\n      <td>0.636364</td>\n      <td>136.909091</td>\n      <td>0.000000</td>\n      <td>0.690909</td>\n      <td>1.636364</td>\n      <td>0.909091</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>74</td>\n      <td>0</td>\n      <td>1.000000</td>\n      <td>120.000000</td>\n      <td>269.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>121.000000</td>\n      <td>1.000000</td>\n      <td>0.200000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>76</td>\n      <td>0</td>\n      <td>2.000000</td>\n      <td>140.000000</td>\n      <td>197.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>116.000000</td>\n      <td>0.000000</td>\n      <td>1.100000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>77</td>\n      <td>1</td>\n      <td>0.000000</td>\n      <td>125.000000</td>\n      <td>304.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>162.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>73 rows Ã— 14 columns</p>\n</div>","text/plain":"    age  sex        cp    trestbps        chol       fbs   restecg  \\\n0    29    1  1.000000  130.000000  204.000000  0.000000  0.000000   \n1    34    0  1.000000  118.000000  210.000000  0.000000  1.000000   \n2    34    1  3.000000  118.000000  182.000000  0.000000  0.000000   \n3    35    0  0.000000  138.000000  183.000000  0.000000  1.000000   \n4    35    1  0.363636  122.363636  218.727273  0.000000  0.727273   \n..  ...  ...       ...         ...         ...       ...       ...   \n68   70    1  0.642857  146.285714  251.857143  0.000000  0.500000   \n69   71    0  1.000000  124.363636  232.909091  0.363636  0.636364   \n70   74    0  1.000000  120.000000  269.000000  0.000000  0.000000   \n71   76    0  2.000000  140.000000  197.000000  0.000000  2.000000   \n72   77    1  0.000000  125.000000  304.000000  0.000000  0.000000   \n\n       thalach     exang   oldpeak     slope        ca      thal    target  \n0   202.000000  0.000000  0.000000  2.000000  0.000000  2.000000  1.000000  \n1   192.000000  0.000000  0.700000  2.000000  0.000000  2.000000  1.000000  \n2   174.000000  0.000000  0.000000  2.000000  0.000000  2.000000  1.000000  \n3   182.000000  0.000000  1.400000  2.000000  0.000000  2.000000  1.000000  \n4   153.090909  0.636364  0.581818  1.636364  0.000000  2.636364  0.363636  \n..         ...       ...       ...       ...       ...       ...       ...  \n68  121.500000  0.500000  2.050000  0.928571  1.071429  2.500000  0.214286  \n69  136.909091  0.000000  0.690909  1.636364  0.909091  2.000000  1.000000  \n70  121.000000  1.000000  0.200000  2.000000  1.000000  2.000000  1.000000  \n71  116.000000  0.000000  1.100000  1.000000  0.000000  2.000000  1.000000  \n72  162.000000  1.000000  0.000000  2.000000  3.000000  2.000000  0.000000  \n\n[73 rows x 14 columns]"},"exec_count":11}},"pos":11,"start":1657572319193,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572319235,"exec_count":12,"id":"643e35","input":"df1=df_mean_data[(df_mean_data['sex'] == 1) & (df_mean_data['age'] == 54)]\ndf1","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>37</th>\n      <td>54</td>\n      <td>1</td>\n      <td>0.710526</td>\n      <td>127.184211</td>\n      <td>253.552632</td>\n      <td>0.0</td>\n      <td>0.368421</td>\n      <td>139.315789</td>\n      <td>0.394737</td>\n      <td>1.218421</td>\n      <td>1.263158</td>\n      <td>0.736842</td>\n      <td>2.631579</td>\n      <td>0.447368</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    age  sex        cp    trestbps        chol  fbs   restecg     thalach  \\\n37   54    1  0.710526  127.184211  253.552632  0.0  0.368421  139.315789   \n\n       exang   oldpeak     slope        ca      thal    target  \n37  0.394737  1.218421  1.263158  0.736842  2.631579  0.447368  "},"exec_count":12}},"pos":12,"start":1657572319219,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572347766,"exec_count":15,"id":"4d491a","input":"df.age.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    1025.000000\nmean       54.434146\nstd         9.072290\nmin        29.000000\n25%        48.000000\n50%        56.000000\n75%        61.000000\nmax        77.000000\nName: age, dtype: float64"},"exec_count":15}},"pos":27,"start":1657572347758,"state":"done","type":"cell"}
{"cell_type":"code","end":1657572432787,"exec_count":23,"id":"706302","input":"def specify():\n    \n    print(\"Please Enter Sex\")\n    ans_sex = input(\"Sex\")\n    if ans_sex.lower() in ['male']:\n        s = 1\n        \n    elif ans_sex.lower() in ['female']:\n        s = 0\n    else:\n        exit()\n    \n    print(\"Please Enter Age\")\n    ans_age = int(input(\"Age\"))\n    \n    if ans_age < 29 or ans_age > 77:\n        print(\"No data for that age\")\n        exit() \n        \n \n    new_df = df_mean_data[(df_mean_data['sex'] == s) & (df_mean_data['age'] == ans_age)]\n    return new_df","kernel":"ds_env","pos":24,"start":1657572432779,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"471209","input":"q1 = df.trestbps.quantile(0.25)\nq3 = df.trestbps.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"trestbps\"] < upper_limit]","kernel":"ds_env","pos":8.375,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":39,"id":"5aaf01","input":"def heart_disease(df):\n    df.drop(axis = 1)\n    outcome = xgb_model.predict(df)\n    return outcome","kernel":"ds_env","pos":30,"state":"done","type":"cell"}
{"cell_type":"code","id":"12206e","input":"","pos":34,"type":"cell"}
{"cell_type":"code","id":"21c8a4","input":"","pos":33,"type":"cell"}
{"cell_type":"code","id":"23b9ab","input":"","pos":31,"type":"cell"}
{"cell_type":"code","id":"330541","input":"","pos":36,"type":"cell"}
{"cell_type":"code","id":"8b3601","input":"","pos":37,"type":"cell"}
{"cell_type":"code","id":"950bbe","input":"","pos":32,"type":"cell"}
{"cell_type":"code","id":"f29ba1","input":"","pos":35,"type":"cell"}
{"cell_type":"markdown","exec_count":9,"id":"8c6671","input":"### XGB Machine Learning Code","kernel":"ds_env","no_halt":true,"pos":8.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1a9e45","input":"#### For people who may not have access to their own medical data ","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"228f2a","input":"### Returns whether or not patient has heart disease based on mean data","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"450105","input":"### Splitting Data and Scaling","pos":8.484375,"type":"cell"}
{"cell_type":"markdown","id":"4b1588","input":"minimum age = 29 <br>\nmaximum age = 77 ","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"672240","input":"### Removing Outliers","pos":8.125,"type":"cell"}
{"cell_type":"markdown","id":"9981ee","input":"### Returns mean data based on sex and age","pos":18,"type":"cell"}
{"end":1657572392929,"exec_count":19,"id":"0f7a38","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"chol\"] < upper_limit]","kernel":"ds_env","pos":8.25,"start":1657572392915,"state":"done","type":"cell"}
{"end":1657572396336,"exec_count":21,"id":"153132","input":"q1 = df.thalach.quantile(0.25)\nq3 = df.thalach.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\ndf=df[df[\"thalach\"] > lower_limit]","kernel":"ds_env","pos":8.4375,"start":1657572396326,"state":"done","type":"cell"}
{"end":1657572399304,"exec_count":22,"id":"dbdcd7","input":"oldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]","kernel":"ds_env","pos":8.46875,"start":1657572399296,"state":"done","type":"cell"}
{"end":1657572471934,"exec_count":25,"id":"a00e27","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","kernel":"ds_env","pos":8.4921875,"start":1657572471911,"state":"done","type":"cell"}
{"end":1657572483760,"exec_count":26,"id":"aae04e","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","kernel":"ds_env","pos":8.49609375,"start":1657572483745,"state":"done","type":"cell"}
{"end":1657572493304,"exec_count":27,"id":"651924","input":"from sklearn.neighbors import KNeighborsClassifier as KNN","kernel":"ds_env","pos":8.625,"start":1657572493287,"state":"done","type":"cell"}
{"end":1657572501332,"exec_count":28,"id":"b3bc86","input":"knn_parameters = {'weights':('uniform', 'distance'), 'n_neighbors':[1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14, 15], 'algorithm':('auto', 'ball_tree', 'kd_tree', 'brute'), 'p':[1, 2, 3, 4, 5], 'metric': ('minkowski', 'euclidean', 'manhattan', 'chebyshev', 'wminkowski', 'seuclidean', 'mahalanobis') }","kernel":"ds_env","pos":8.75,"start":1657572501322,"state":"done","type":"cell"}
{"end":1657572515885,"exec_count":29,"id":"78737a","input":"knn_gs = GridSearchCV(KNN(), knn_parameters, scoring = 'recall')","kernel":"ds_env","pos":8.875,"start":1657572515882,"state":"done","type":"cell"}
{"end":1657572655935,"exec_count":30,"id":"8377f7","input":"knn_gs.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;metric&#x27;: (&#x27;minkowski&#x27;, &#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                    &#x27;chebyshev&#x27;, &#x27;wminkowski&#x27;, &#x27;seuclidean&#x27;,\n                                    &#x27;mahalanobis&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;metric&#x27;: (&#x27;minkowski&#x27;, &#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                    &#x27;chebyshev&#x27;, &#x27;wminkowski&#x27;, &#x27;seuclidean&#x27;,\n                                    &#x27;mahalanobis&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={'algorithm': ('auto', 'ball_tree', 'kd_tree', 'brute'),\n                         'metric': ('minkowski', 'euclidean', 'manhattan',\n                                    'chebyshev', 'wminkowski', 'seuclidean',\n                                    'mahalanobis'),\n                         'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         'p': [1, 2, 3, 4, 5],\n                         'weights': ('uniform', 'distance')},\n             scoring='recall')"},"exec_count":30}},"pos":8.9375,"start":1657572517590,"state":"done","type":"cell"}
{"end":1657572655951,"exec_count":31,"id":"a77b77","input":"KNN_Model = KNN(n_neighbors=7, weights='distance')","kernel":"ds_env","pos":8.96875,"start":1657572655947,"state":"done","type":"cell"}
{"end":1657572655970,"exec_count":32,"id":"66fa6e","input":"KNN_Model.fit(x_train,y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7, weights='distance')"},"exec_count":32}},"pos":8.984375,"start":1657572655963,"state":"done","type":"cell"}
{"end":1657572655983,"exec_count":33,"id":"9a8bf1","input":"KNN_yhat = KNN_Model.predict(x_test)","kernel":"ds_env","pos":8.9921875,"start":1657572655976,"state":"done","type":"cell"}
{"end":1657572655997,"exec_count":34,"id":"033a38","input":"print('Recall score for the KNN model is ' + \nstr(recall_score(y_test,KNN_yhat)))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Recall score for the KNN model is 0.9444444444444444\n"}},"pos":8.99609375,"start":1657572655991,"state":"done","type":"cell"}
{"end":1657572994899,"exec_count":36,"id":"c43427","input":"from xgboost import XGBClassifier","kernel":"ds_env","pos":8.998046875,"start":1657572994833,"state":"done","type":"cell"}
{"end":1657573069870,"exec_count":37,"id":"8e0329","input":"xgb_model = XGBClassifier(booster='gbtree', max_depth=6, sampling_method='uniform')\nxgb_model.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>","text/plain":"XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)"},"exec_count":37}},"pos":8.9990234375,"start":1657573069220,"state":"done","type":"cell"}
{"end":1657573170728,"exec_count":38,"id":"59bc02","input":"df_1 = specify()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Please Enter Sex\n"},"1":{"name":"input","opts":{"password":false,"prompt":"Sex"},"value":"male"},"2":{"name":"stdout","text":"Please Enter Age\n"},"3":{"name":"input","opts":{"password":false,"prompt":"Age"},"value":"54"}},"pos":25.5,"start":1657573166938,"state":"done","type":"cell"}
{"end":1657573194154,"exec_count":40,"id":"642de3","input":"heart_disease(df_1)","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"Feature shape mismatch, expected: 13, got 14","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [40]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mheart_disease\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf_1\u001b[49m\u001b[43m)\u001b[49m\n","Input \u001b[0;32mIn [39]\u001b[0m, in \u001b[0;36mheart_disease\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mheart_disease\u001b[39m(df):\n\u001b[0;32m----> 2\u001b[0m     outcome \u001b[38;5;241m=\u001b[39m \u001b[43mxgb_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m outcome\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/xgboost/sklearn.py:1434\u001b[0m, in \u001b[0;36mXGBClassifier.predict\u001b[0;34m(self, X, output_margin, ntree_limit, validate_features, base_margin, iteration_range)\u001b[0m\n\u001b[1;32m   1425\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpredict\u001b[39m(\n\u001b[1;32m   1426\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   1427\u001b[0m     X: ArrayLike,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1432\u001b[0m     iteration_range: Optional[Tuple[\u001b[38;5;28mint\u001b[39m, \u001b[38;5;28mint\u001b[39m]] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1433\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m np\u001b[38;5;241m.\u001b[39mndarray:\n\u001b[0;32m-> 1434\u001b[0m     class_probs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1435\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1436\u001b[0m \u001b[43m        \u001b[49m\u001b[43moutput_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moutput_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1437\u001b[0m \u001b[43m        \u001b[49m\u001b[43mntree_limit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mntree_limit\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1438\u001b[0m \u001b[43m        \u001b[49m\u001b[43mvalidate_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidate_features\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1439\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1440\u001b[0m \u001b[43m        \u001b[49m\u001b[43miteration_range\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43miteration_range\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1441\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1442\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m output_margin:\n\u001b[1;32m   1443\u001b[0m         \u001b[38;5;66;03m# If output_margin is active, simply return the scores\u001b[39;00m\n\u001b[1;32m   1444\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m class_probs\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/xgboost/sklearn.py:1049\u001b[0m, in \u001b[0;36mXGBModel.predict\u001b[0;34m(self, X, output_margin, ntree_limit, validate_features, base_margin, iteration_range)\u001b[0m\n\u001b[1;32m   1047\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_can_use_inplace_predict():\n\u001b[1;32m   1048\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1049\u001b[0m         predts \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_booster\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minplace_predict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1050\u001b[0m \u001b[43m            \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1051\u001b[0m \u001b[43m            \u001b[49m\u001b[43miteration_range\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43miteration_range\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1052\u001b[0m \u001b[43m            \u001b[49m\u001b[43mpredict_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmargin\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43moutput_margin\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mvalue\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1053\u001b[0m \u001b[43m            \u001b[49m\u001b[43mmissing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmissing\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1054\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1055\u001b[0m \u001b[43m            \u001b[49m\u001b[43mvalidate_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidate_features\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1056\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1057\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m _is_cupy_array(predts):\n\u001b[1;32m   1058\u001b[0m             \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcupy\u001b[39;00m     \u001b[38;5;66;03m# pylint: disable=import-error\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/xgboost/core.py:2083\u001b[0m, in \u001b[0;36mBooster.inplace_predict\u001b[0;34m(self, data, iteration_range, predict_type, missing, validate_features, base_margin, strict_shape)\u001b[0m\n\u001b[1;32m   2079\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[1;32m   2080\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m`shape` attribute is required when `validate_features` is True.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   2081\u001b[0m         )\n\u001b[1;32m   2082\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(data\u001b[38;5;241m.\u001b[39mshape) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m1\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnum_features() \u001b[38;5;241m!=\u001b[39m data\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]:\n\u001b[0;32m-> 2083\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   2084\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFeature shape mismatch, expected: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnum_features()\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   2085\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgot \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdata\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   2086\u001b[0m         )\n\u001b[1;32m   2088\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdata\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (\n\u001b[1;32m   2089\u001b[0m     _is_pandas_df,\n\u001b[1;32m   2090\u001b[0m     _transform_pandas_df,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   2093\u001b[0m     _array_interface,\n\u001b[1;32m   2094\u001b[0m )\n\u001b[1;32m   2095\u001b[0m enable_categorical \u001b[38;5;241m=\u001b[39m _has_categorical(\u001b[38;5;28mself\u001b[39m, data)\n","\u001b[0;31mValueError\u001b[0m: Feature shape mismatch, expected: 13, got 14"]}},"pos":30.5,"start":1657573193208,"state":"done","type":"cell"}
{"end":1657573286372,"exec_count":43,"id":"d8c048","input":"xgb_y_hat = xgb_model.predict(x_test)","kernel":"ds_env","pos":8.999267578125,"start":1657573286353,"state":"done","type":"cell"}
{"id":"d01210","input":"","pos":8.9970703125,"type":"cell"}
{"id":"fc6139","input":"","pos":8.99951171875,"type":"cell"}
{"id":0,"time":1657573002009,"type":"user"}
{"last_load":1657571502225,"type":"file"}