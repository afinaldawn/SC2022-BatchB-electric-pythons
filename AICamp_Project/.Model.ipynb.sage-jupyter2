{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-82b0a626-5030-4288-b399-776b44aadc48.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657214854083,"exec_count":1,"id":"d37544","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt","kernel":"ds_env","no_halt":true,"pos":0,"start":1657214852412,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854110,"exec_count":2,"id":"07fbb0","input":"df = pd.read_csv('heart.csv')","kernel":"ds_env","no_halt":true,"pos":1,"start":1657214854101,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854448,"exec_count":3,"id":"22d2f2","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":3},"1":{"data":{"image/png":"8cd9da890928fbe53f1352b20367944efe4be76d","text/plain":"<Figure size 1080x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":3,"start":1657214854113,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854568,"exec_count":4,"id":"d9b7ec","input":"sns.boxplot(df[\"chol\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='chol'>"},"exec_count":4},"2":{"data":{"image/png":"0b56cd102165d0c4548135d352de9d62447ba350","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":5,"start":1657214854456,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854588,"exec_count":5,"id":"8389d3","input":"df.chol.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    1025.00000\nmean      246.00000\nstd        51.59251\nmin       126.00000\n25%       211.00000\n50%       240.00000\n75%       275.00000\nmax       564.00000\nName: chol, dtype: float64"},"exec_count":5}},"pos":6,"start":1657214854585,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854608,"exec_count":6,"id":"0fca0b","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\nprint(\"Lower limit for outliers in the column chol is \" + str(lower_limit))\nprint(\"Upper limit for outliers in the column chol is \" + str(upper_limit))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column chol is 115.0\nUpper limit for outliers in the column chol is 371.0\n"}},"pos":7,"start":1657214854594,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854722,"exec_count":7,"id":"909d9b","input":"df=df[df[\"chol\"] < upper_limit]\nsns.boxplot(df[\"chol\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='chol'>"},"exec_count":7},"2":{"data":{"image/png":"bd145278975f3aae3b5d79f345c32046492e332e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":8,"scrolled":true,"start":1657214854612,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854748,"exec_count":8,"id":"18a6e6","input":"df.columns","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"Index(['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target'],\n      dtype='object')"},"exec_count":8}},"pos":10,"scrolled":true,"start":1657214854746,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214854801,"exec_count":9,"id":"294157","input":"#Danh and Vincent\ndf.age.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    1009.000000\nmean       54.304262\nstd         9.073312\nmin        29.000000\n25%        47.000000\n50%        55.000000\n75%        61.000000\nmax        77.000000\nName: age, dtype: float64"},"exec_count":9}},"pos":13,"start":1657214854756,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855031,"exec_count":10,"id":"d0079e","input":"q1a = df.age.quantile(0.25)\nq3a = df.age.quantile(0.75)\nIQR = q3a -q1a\n\nlower_limita = q1a - (1.5*IQR)\nupper_limita = q3a + (1.5*IQR)\nprint(\"Lower limit for outliers in the column age is \" + str(lower_limita))\nprint(\"Upper limit for outliers in the column age is \" + str(upper_limita))\nsns.boxplot(df['age'])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column age is 26.0\nUpper limit for outliers in the column age is 82.0\n"},"1":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"2":{"data":{"text/plain":"<AxesSubplot:xlabel='age'>"},"exec_count":10},"3":{"data":{"image/png":"54c279c228cbe35b0ca996e07ed69da54d5f84ef","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14,"start":1657214854835,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855047,"exec_count":11,"id":"ba4eb3","input":"df.sex.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    1009.000000\nmean        0.706640\nstd         0.455528\nmin         0.000000\n25%         0.000000\n50%         1.000000\n75%         1.000000\nmax         1.000000\nName: sex, dtype: float64"},"exec_count":11}},"pos":16,"start":1657214855043,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855175,"exec_count":12,"id":"750ffe","input":"q1s = df.sex.quantile(0.25)\nq3s = df.sex.quantile(0.75)\nIQRs = q3 - q1\nlower_limits = q1s - 1.5 * IQRs\nupper_limits = q3s + 1.5 * IQRs\nprint(\"Lower limit for outliers in the column sex is \" + str(lower_limits))\nprint(\"Upper limit for outliers in the column sex is \" + str(upper_limits))\n\nsns.boxplot(df['sex'])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column sex is -96.0\nUpper limit for outliers in the column sex is 97.0\n"},"1":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"2":{"data":{"text/plain":"<AxesSubplot:xlabel='sex'>"},"exec_count":12},"3":{"data":{"image/png":"be6e903d0c93ebb1ebe73899790e8a3ecec378d8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":17,"start":1657214855060,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855201,"exec_count":13,"id":"8fdabf","input":"df.cp.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    1009.000000\nmean        0.945491\nstd         1.030296\nmin         0.000000\n25%         0.000000\n50%         1.000000\n75%         2.000000\nmax         3.000000\nName: cp, dtype: float64"},"exec_count":13}},"pos":18,"start":1657214855196,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855339,"exec_count":14,"id":"916f8d","input":"q1cp = df.cp.quantile(0.25)\nq3cp = df.cp.quantile(0.75)\nIQRcp = q3cp - q1cp\nlower_limitcp = q1cp - 1.5 * IQRcp\nupper_limitcp = q3cp + 1.5 * IQRcp\nprint(\"Lower limit for outliers in the column chol is \" + str(lower_limitcp))\nprint(\"Upper limit for outliers in the column chol is \" + str(upper_limitcp))\nsns.boxplot(df['cp'])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column chol is -3.0\nUpper limit for outliers in the column chol is 5.0\n"},"1":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"2":{"data":{"text/plain":"<AxesSubplot:xlabel='cp'>"},"exec_count":14},"3":{"data":{"image/png":"9a009424fed39e6fa17ce7b29ef23698fdcc1923","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":19,"start":1657214855224,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855356,"exec_count":15,"id":"421cf6","input":"df.trestbps.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    1009.000000\nmean      131.531219\nstd        17.581253\nmin        94.000000\n25%       120.000000\n50%       130.000000\n75%       140.000000\nmax       200.000000\nName: trestbps, dtype: float64"},"exec_count":15}},"pos":20,"start":1657214855348,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855369,"exec_count":16,"id":"0ac359","input":"q1t = df.trestbps.quantile(0.25)\nq3t = df.trestbps.quantile(0.75)\nIQR = q3t-q1t\n\nlower_limitt = q1t- (1.5*IQR)\nupper_limitt = q3t+ (1.5*IQR)\nprint(\"Lower limit for outliers in the column trestbps is \" + str(lower_limitt))\nprint(\"Upper limit for outliers in the column trestbps is \" + str(upper_limitt))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column trestbps is 90.0\nUpper limit for outliers in the column trestbps is 170.0\n"}},"pos":21,"start":1657214855366,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855515,"exec_count":17,"id":"c51f60","input":"df = df[df['trestbps']< upper_limitt]\ndf.head()\nsns.boxplot(df['trestbps'])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='trestbps'>"},"exec_count":17},"2":{"data":{"image/png":"b3e4ee6f798423b6eb9a6abd76cde1fd94a2e493","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":22,"start":1657214855398,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855636,"exec_count":18,"id":"94ec31","input":"#Evan\nsns.boxplot(df[\"fbs\"])\ndf.fbs.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"count    964.000000\nmean       0.136929\nstd        0.343951\nmin        0.000000\n25%        0.000000\n50%        0.000000\n75%        0.000000\nmax        1.000000\nName: fbs, dtype: float64"},"exec_count":18},"2":{"data":{"image/png":"dbfb810888c80888602d119cf06558181531fc3d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":23,"start":1657214855525,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855898,"exec_count":19,"id":"fefba4","input":"sns.boxplot(df['restecg'])\ndf.restecg.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"count    964.000000\nmean       0.541494\nstd        0.520943\nmin        0.000000\n25%        0.000000\n50%        1.000000\n75%        1.000000\nmax        2.000000\nName: restecg, dtype: float64"},"exec_count":19},"2":{"data":{"image/png":"895091d167f5cdf3469e07824600b75378e7b118","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":24,"start":1657214855651,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214855925,"exec_count":20,"id":"202395","input":"#Alex\ndf.thalach.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    964.000000\nmean     148.949170\nstd       23.394901\nmin       71.000000\n25%      132.000000\n50%      152.000000\n75%      168.000000\nmax      202.000000\nName: thalach, dtype: float64"},"exec_count":20}},"pos":25,"start":1657214855909,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856197,"exec_count":21,"id":"ac9ae3","input":"sns.boxplot(df[\"thalach\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='thalach'>"},"exec_count":21},"2":{"data":{"image/png":"de64e18b1bd58e7be58f7b3833d483ec99488be1","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":26,"start":1657214855928,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856218,"exec_count":22,"id":"f00888","input":"thalach_q1 = df.thalach.quantile(0.25)\nthalach_q3 = df.thalach.quantile(0.75)\nthalach_IQR = thalach_q3 - thalach_q1\nth_lower_limit = thalach_q1 - 1.5 * thalach_IQR\nth_upper_limit = thalach_q3 + 1.5 * thalach_IQR\nprint(\"Lower limit for outliers in the column thalach is \" + str(th_lower_limit))\nprint(\"Upper limit for outliers in the column thalach \" + str(th_upper_limit))\n","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column thalach is 78.0\nUpper limit for outliers in the column thalach 222.0\n"}},"pos":27,"start":1657214856202,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856429,"exec_count":23,"id":"88737f","input":"df=df[df[\"thalach\"] > th_lower_limit]\nsns.boxplot(df[\"thalach\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='thalach'>"},"exec_count":23},"2":{"data":{"image/png":"96999f7f33c1fc041f92362e0a95388fb9ad7044","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":28,"start":1657214856234,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856455,"exec_count":24,"id":"540f6e","input":"df.exang.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    960.000000\nmean       0.327083\nstd        0.469393\nmin        0.000000\n25%        0.000000\n50%        0.000000\n75%        1.000000\nmax        1.000000\nName: exang, dtype: float64"},"exec_count":24}},"pos":29,"start":1657214856448,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856610,"exec_count":25,"id":"c8ea23","input":"sns.boxplot(df[\"exang\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='exang'>"},"exec_count":25},"2":{"data":{"image/png":"450484f3fbfcf526fbedb426a7e71579159f5c3c","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":30,"start":1657214856470,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856759,"exec_count":26,"id":"4517c8","input":"# Sophia & Hikari\ndf.oldpeak.describe()\noldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\nprint(\"Lower limit for outliers in the column chol is \" + str(oldpeak_lower_limit))\nprint(\"Upper limit for outliers in the column chol is \" + str(oldpeak_upper_limit))\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]\nsns.boxplot(df[\"oldpeak\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column chol is -2.4000000000000004\nUpper limit for outliers in the column chol is 4.0\n"},"1":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"2":{"data":{"text/plain":"<AxesSubplot:xlabel='oldpeak'>"},"exec_count":26},"3":{"data":{"image/png":"4c82ee71c5a3fbe0d00c75ff35041432c9b53158","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":31,"scrolled":true,"start":1657214856630,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856778,"exec_count":27,"id":"3b41d3","input":"df.oldpeak.quantile(0.75)\noldpeak_IQR * 1.5 + df.oldpeak.quantile(0.75)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"4.0"},"exec_count":27}},"pos":32,"start":1657214856776,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856800,"exec_count":28,"id":"a9693d","input":"df.slope.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    942.000000\nmean       1.424628\nstd        0.597683\nmin        0.000000\n25%        1.000000\n50%        1.000000\n75%        2.000000\nmax        2.000000\nName: slope, dtype: float64"},"exec_count":28}},"pos":33,"start":1657214856784,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856942,"exec_count":29,"id":"f74874","input":"sns.boxplot(df[\"slope\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='slope'>"},"exec_count":29},"2":{"data":{"image/png":"bff012caa0c5c19caf781c3d872dd00226e6e8ca","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":34,"start":1657214856805,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214856961,"exec_count":30,"id":"9d6359","input":"df.ca.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"count    942.000000\nmean       0.729299\nstd        1.011082\nmin        0.000000\n25%        0.000000\n50%        0.000000\n75%        1.000000\nmax        4.000000\nName: ca, dtype: float64"},"exec_count":30}},"pos":35,"start":1657214856957,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857127,"exec_count":31,"id":"609dd8","input":"sns.boxplot(df[\"ca\"])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='ca'>"},"exec_count":31},"2":{"data":{"image/png":"c4246903c64131fca6bfbce4fca86b811161e4da","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":36,"scrolled":true,"start":1657214856965,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857280,"exec_count":32,"id":"1dfef0","input":"df.thal.describe()\nsns.boxplot(df.thal)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='thal'>"},"exec_count":32},"2":{"data":{"image/png":"19d198f029d914a4514a3652134f8744fe389c43","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":37,"start":1657214857144,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857345,"exec_count":33,"id":"cd1cb5","input":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","no_halt":true,"pos":38,"start":1657214857289,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857380,"exec_count":34,"id":"f22156","input":"df.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trestbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalach</th>\n      <th>exang</th>\n      <th>oldpeak</th>\n      <th>slope</th>\n      <th>ca</th>\n      <th>thal</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>52</td>\n      <td>1</td>\n      <td>0</td>\n      <td>125</td>\n      <td>212</td>\n      <td>0</td>\n      <td>1</td>\n      <td>168</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53</td>\n      <td>1</td>\n      <td>0</td>\n      <td>140</td>\n      <td>203</td>\n      <td>1</td>\n      <td>0</td>\n      <td>155</td>\n      <td>1</td>\n      <td>3.1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>70</td>\n      <td>1</td>\n      <td>0</td>\n      <td>145</td>\n      <td>174</td>\n      <td>0</td>\n      <td>1</td>\n      <td>125</td>\n      <td>1</td>\n      <td>2.6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>61</td>\n      <td>1</td>\n      <td>0</td>\n      <td>148</td>\n      <td>203</td>\n      <td>0</td>\n      <td>1</td>\n      <td>161</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>138</td>\n      <td>294</td>\n      <td>1</td>\n      <td>1</td>\n      <td>106</td>\n      <td>0</td>\n      <td>1.9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n0   52    1   0       125   212    0        1      168      0      1.0      2   \n1   53    1   0       140   203    1        0      155      1      3.1      0   \n2   70    1   0       145   174    0        1      125      1      2.6      0   \n3   61    1   0       148   203    0        1      161      0      0.0      2   \n4   62    0   0       138   294    1        1      106      0      1.9      1   \n\n   ca  thal  target  \n0   2     3       0  \n1   0     3       0  \n2   0     3       0  \n3   1     3       0  \n4   3     2       0  "},"exec_count":34}},"pos":39,"start":1657214857350,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857397,"exec_count":35,"id":"6e7380","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)","kernel":"ds_env","no_halt":true,"pos":41,"start":1657214857384,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857416,"exec_count":36,"id":"288c33","input":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","kernel":"ds_env","no_halt":true,"pos":42,"start":1657214857407,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857458,"exec_count":37,"id":"d10865","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","kernel":"ds_env","no_halt":true,"pos":44,"start":1657214857423,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857475,"exec_count":38,"id":"d63df6","input":"from sklearn.naive_bayes import GaussianNB\nNBModel = GaussianNB()","kernel":"ds_env","no_halt":true,"pos":47,"start":1657214857467,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857499,"exec_count":39,"id":"12b14c","input":"NBModel.fit(x_train, y_train)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>","text/plain":"GaussianNB()"},"exec_count":39}},"pos":48,"start":1657214857483,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857516,"exec_count":40,"id":"be0b28","input":"y_hat = NBModel.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":49,"start":1657214857505,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857528,"exec_count":41,"id":"c3384a","input":"y_hat","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n       0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1,\n       0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":41}},"pos":50,"start":1657214857524,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857538,"exec_count":42,"id":"340a53","input":"np.array(y_test)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":42}},"pos":51,"start":1657214857534,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857546,"exec_count":43,"id":"3e4ca1","input":"total_squared_error = (np.sum((y_test - y_hat)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.2275132275132275\n"}},"pos":52,"start":1657214857541,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857556,"exec_count":44,"id":"44f04b","input":"NBscore = NBModel.score(x_test,y_test)\nprint(NBscore)\n\n","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.7724867724867724\n"}},"pos":53,"start":1657214857551,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857760,"exec_count":45,"id":"53f89e","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":45},"1":{"data":{"image/png":"d82cac3f342370c2809af574058d245aa258f7f5","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":54,"start":1657214857559,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857773,"exec_count":46,"id":"3ba73a","input":"#Precision\nNBPrecision_score = 81 / (0+81)\nprint(NBPrecision_score)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"1.0\n"}},"pos":55,"start":1657214857771,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857785,"exec_count":47,"id":"0dfcb1","input":"#Recall\nNBRecall_score = 81 / (3+81)\nprint(NBRecall_score)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9642857142857143\n"}},"pos":56,"start":1657214857782,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857795,"exec_count":48,"id":"5a39ef","input":"#Accuracy\nNBAccuracy_score = (81 + 105)/(81 + 0 + 3 +105)\nprint(NBAccuracy_score)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9841269841269841\n"}},"pos":57,"start":1657214857789,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857803,"exec_count":49,"id":"683c41","input":"#F1\nNBF1_score = (2 * NBPrecision_score * NBRecall_score)/(NBPrecision_score + NBRecall_score)\nprint(NBF1_score)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9818181818181818\n"}},"pos":58,"start":1657214857797,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857835,"exec_count":50,"id":"3a1d27","input":"from sklearn.linear_model import LogisticRegression #Logistic Regression","kernel":"ds_env","no_halt":true,"pos":60,"start":1657214857808,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857844,"exec_count":51,"id":"842b23","input":"Regr = LogisticRegression(max_iter= 500)","kernel":"ds_env","no_halt":true,"pos":61,"start":1657214857839,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857858,"exec_count":52,"id":"15b7ce","input":"Regr.fit(x_train,y_train)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div>","text/plain":"LogisticRegression(max_iter=500)"},"exec_count":52}},"pos":62,"start":1657214857847,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857868,"exec_count":53,"id":"d0c5c4","input":"yRegr_hat= Regr.predict(x_test)\nyRegr_hat","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1,\n       1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":53}},"pos":63,"start":1657214857861,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857878,"exec_count":54,"id":"ecba30","input":"np.array(y_test)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":54}},"pos":64,"start":1657214857872,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214857890,"exec_count":55,"id":"a0d4de","input":"scoreRegr = Regr.score(x_test,y_test)\nprint(scoreRegr)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.8306878306878307\n"}},"pos":65,"start":1657214857884,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858111,"exec_count":56,"id":"ba650c","input":"plt.figure(figsize=(10,10))\nsns.heatmap(confusion_matrix(y_test,yRegr_hat), annot= True, fmt = 'g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":56},"1":{"data":{"image/png":"3378bf44ac0690662cd1e00e50aae6f06b8dc0fa","text/plain":"<Figure size 720x720 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":66,"start":1657214857927,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858129,"exec_count":57,"id":"db48cc","input":"#Mean Squared Error\ntotal_squared_error = (np.sum((y_test - y_hat)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)\n","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.2275132275132275\n"}},"pos":67,"start":1657214858127,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858143,"exec_count":58,"id":"cdf85e","input":"#precison  TP/TP+FP\nprecision = 63/(63+18)\nprint(precision)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.7777777777777778\n"}},"pos":68,"start":1657214858140,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858157,"exec_count":59,"id":"6ed193","input":"#recall TP/TP+FN\nrecall = 63/(63+14)\nprint(recall)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.8181818181818182\n"}},"pos":69,"start":1657214858156,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858168,"exec_count":60,"id":"c758ff","input":"#F1 (2 x precision x recall) / (precision + recall)\n\n(2*precision*recall)/(precision +recall)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.7974683544303799"},"exec_count":60}},"pos":70,"start":1657214858165,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858181,"exec_count":61,"id":"f2cc89","input":"#accuracy (TP+TN)/(TP+FN+TN+FP)\n\n(63+94)/(63+18+14+94)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8306878306878307"},"exec_count":61}},"pos":71,"start":1657214858171,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858838,"exec_count":62,"id":"31c8a7","input":"scoreXGB = XGB_model.score(x_test,y_test)\nprint(scoreXGB)","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'XGB_model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [62]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m scoreXGB \u001b[38;5;241m=\u001b[39m \u001b[43mXGB_model\u001b[49m\u001b[38;5;241m.\u001b[39mscore(x_test,y_test)\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(scoreXGB)\n","\u001b[0;31mNameError\u001b[0m: name 'XGB_model' is not defined"]}},"pos":72,"start":1657214858184,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214858900,"exec_count":63,"id":"1164fc","input":"# extreme gradient boost\nimport sklearn\nfrom sklearn.metrics import confusion_matrix\nfrom xgboost import XGBClassifier\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score","kernel":"ds_env","no_halt":true,"pos":73,"start":1657214858847,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859452,"exec_count":64,"id":"d7f363","input":"XGB_model = XGBClassifier()\nXGB_model.fit(x_train, y_train)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>","text/plain":"XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)"},"exec_count":64}},"pos":74,"start":1657214858923,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859467,"exec_count":65,"id":"f940a7","input":"XGB_y_hat = XGB_model.predict(x_test)\nXGB_y_hat","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":65}},"pos":75,"start":1657214859458,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859483,"exec_count":66,"id":"3af1a0","input":"np.array(y_test)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":66}},"pos":76,"start":1657214859480,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859700,"exec_count":67,"id":"19d220","input":"# confusion matrix\nsns.heatmap(confusion_matrix(y_test, XGB_y_hat), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":67},"1":{"data":{"image/png":"5dfc5843847f62ce004b2c24c6d44f6ef68768eb","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":77,"start":1657214859494,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859714,"exec_count":68,"id":"674933","input":"# precision\nprint('Precision: %.3f' % precision_score(y_test, XGB_y_hat))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Precision: 1.000\n"}},"pos":78,"start":1657214859707,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859738,"exec_count":69,"id":"3f5a06","input":"# F1 score\nprint('F1 Score: %.3f' % f1_score(y_test, XGB_y_hat))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"F1 Score: 0.986\n"}},"pos":79,"start":1657214859729,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859751,"exec_count":70,"id":"972cfe","input":"# MSE\nXGB_total_squared_error = (np.sum((y_test - XGB_y_hat)**2))\nXGB_mean_squared_error = XGB_total_squared_error/len(y_test)\nprint(XGB_mean_squared_error)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.015873015873015872\n"}},"pos":80,"start":1657214859742,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859769,"exec_count":71,"id":"252fe5","input":"# accuracy\nXGB_accuracy = accuracy_score(y_test, XGB_y_hat)\nprint(\"Accuracy: %.2f%%\" % (XGB_accuracy * 100.0))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Accuracy: 98.41%\n"}},"pos":81,"start":1657214859755,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214859781,"exec_count":72,"id":"7868f7","input":"# recall\nprint('Recall: %.3f' % recall_score(y_test, XGB_y_hat))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Recall: 0.972\n"}},"pos":82,"start":1657214859778,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860055,"exec_count":73,"id":"40e067","input":"from sklearn.ensemble import RandomForestClassifier\nForest_Model = RandomForestClassifier(n_estimators = 100, oob_score = True, n_jobs = 1, random_state = 1)\nForest_Model.fit(x_train, y_train)\ny_hat_forest = Forest_Model.predict(x_test)\ny_hat_forest","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":73}},"pos":84,"start":1657214859784,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860067,"exec_count":74,"id":"26f367","input":"np.array(y_test)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":74}},"pos":85,"start":1657214860060,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860230,"exec_count":75,"id":"f3c72f","input":"sns.heatmap(confusion_matrix(y_test, y_hat_forest), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":75},"1":{"data":{"image/png":"5dfc5843847f62ce004b2c24c6d44f6ef68768eb","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":86,"start":1657214860072,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860242,"exec_count":76,"id":"e25454","input":"#Precision\nRFPrecision = 81 / (0 + 81)\nprint(RFPrecision)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"1.0\n"}},"pos":87,"start":1657214860237,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860251,"exec_count":77,"id":"df20ba","input":"#Recall\nRFRecall = 81 / (3+81)\nprint(RFRecall)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9642857142857143\n"}},"pos":88,"start":1657214860247,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860260,"exec_count":78,"id":"175234","input":"#Accuracy\nRFAccuracy = (81 +105) / (81 +0 + 3 + 105)\nprint(RFAccuracy)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9841269841269841\n"}},"pos":89,"start":1657214860256,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860269,"exec_count":79,"id":"9823d1","input":"#F1\nRFF1 = (2 * RFPrecision * RFRecall) / (RFPrecision + RFRecall)\nprint(RFF1)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9818181818181818\n"}},"pos":90,"start":1657214860265,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860289,"exec_count":80,"id":"fcb7c8","input":"from sklearn.linear_model import Perceptron #Perceptron ","kernel":"ds_env","no_halt":true,"pos":91,"start":1657214860287,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860316,"exec_count":81,"id":"319df8","input":"my_Perceptron_Model = Perceptron(random_state=1, n_jobs = -1, eta0 = 1)\nmy_Perceptron_Model.fit(x_train, y_train)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Perceptron(eta0=1, n_jobs=-1, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Perceptron</label><div class=\"sk-toggleable__content\"><pre>Perceptron(eta0=1, n_jobs=-1, random_state=1)</pre></div></div></div></div></div>","text/plain":"Perceptron(eta0=1, n_jobs=-1, random_state=1)"},"exec_count":81}},"pos":92,"start":1657214860304,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860333,"exec_count":82,"id":"55cff5","input":"y_hat_Perceptron = my_Perceptron_Model.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":93,"start":1657214860324,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860344,"exec_count":83,"id":"c00fb9","input":"total_squared_error_Perceptron = (np.sum((y_test - y_hat_Perceptron)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error_Perceptron = total_squared_error_Perceptron/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error_Perceptron)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.17989417989417988\n"}},"pos":94,"start":1657214860337,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860527,"exec_count":84,"id":"6564bf","input":"sns.heatmap(confusion_matrix(y_test, y_hat_Perceptron), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":84},"1":{"data":{"image/png":"9ab399a60697b586a799334c406e20a3a5e2fdf3","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":95,"start":1657214860349,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860543,"exec_count":85,"id":"1eacc1","input":"recall_Perception = 57 / (57 + 10)\nrecall_Perception","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8507462686567164"},"exec_count":85}},"pos":96,"start":1657214860542,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860559,"exec_count":86,"id":"e41c97","input":"precision_Perception = 57 / (57 + 24)\nprecision_Perception","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.7037037037037037"},"exec_count":86}},"pos":97,"start":1657214860547,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860569,"exec_count":87,"id":"239c0e","input":"accuracy_Perception = (57 + 96) / (57 + 96 + 24 + 10)\naccuracy_Perception","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8181818181818182"},"exec_count":87}},"pos":98,"start":1657214860562,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860596,"exec_count":88,"id":"de1ad4","input":"f1_Perception = (2 * recall_Perception * precision_Perception) / (recall_Perception + precision_Perception)\nf1_Perception","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.7702702702702703"},"exec_count":88}},"pos":99,"start":1657214860574,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860614,"exec_count":89,"id":"7685b3","input":"from sklearn.neighbors import KNeighborsClassifier as KNN #K-Nearest Neighbors\nmy_KNN_model = KNN(n_neighbors=3)","kernel":"ds_env","no_halt":true,"pos":100,"start":1657214860603,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860631,"exec_count":90,"id":"bcba8a","input":"my_KNN_model.fit(x_train, y_train)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=3)"},"exec_count":90}},"pos":101,"start":1657214860618,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860649,"exec_count":91,"id":"b3d51b","input":"y_hat_KNN = my_KNN_model.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":102,"start":1657214860636,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860664,"exec_count":92,"id":"a4b9c8","input":"total_squared_error_KNN = (np.sum((y_test - y_hat_KNN)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error_KNN = total_squared_error_KNN/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error_KNN)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.026455026455026454\n"}},"pos":103,"start":1657214860656,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860855,"exec_count":93,"id":"abb5fe","input":"sns.heatmap(confusion_matrix(y_test, y_hat_KNN), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":93},"1":{"data":{"image/png":"b71e776f108e64f3e7b4f3a87222fe83c4dbff5b","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":104,"start":1657214860688,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860871,"exec_count":94,"id":"488c4a","input":"recall_KNN = 78 / (78 + 2)\nrecall_KNN","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.975"},"exec_count":94}},"pos":105,"start":1657214860867,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860881,"exec_count":95,"id":"5ec9f8","input":"precision_KNN = 78 / (78 + 3)\nprecision_KNN","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9629629629629629"},"exec_count":95}},"pos":106,"start":1657214860877,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860898,"exec_count":96,"id":"c7b9ba","input":"f1_KNN = (2 * recall_KNN * precision_KNN) / (recall_KNN + precision_KNN)\nf1_KNN","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9689440993788819"},"exec_count":96}},"pos":107,"start":1657214860887,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214860911,"exec_count":97,"id":"e553bf","input":"accuracy_KNN = (78 + 106) / (78 + 106 + 3 + 2)\naccuracy_KNN","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9735449735449735"},"exec_count":97}},"pos":108,"start":1657214860907,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861068,"exec_count":98,"id":"e52513","input":"# support vector machine\nfrom sklearn.svm import SVC\nSVC_model = SVC(kernel = 'linear')\nSVC_model.fit(x_train, y_train)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>","text/plain":"SVC(kernel='linear')"},"exec_count":98}},"pos":109,"start":1657214860921,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861094,"exec_count":99,"id":"7b805d","input":"SVC_y_hat = SVC_model.predict(x_test)\nSVC_y_hat","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":99}},"pos":110,"start":1657214861081,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861457,"exec_count":100,"id":"962b41","input":"# confusion matrix\nsns.heatmap(confusion_matrix(y_test, SVC_y_hat), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":100},"1":{"data":{"image/png":"7d6266235f6e241ad6fbd2c099162b3eaff90070","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":111,"start":1657214861098,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861468,"exec_count":101,"id":"0770c5","input":"# precision\nSVC_precision = 96/(22+96)\nSVC_precision","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8135593220338984"},"exec_count":101}},"pos":112,"start":1657214861465,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861478,"exec_count":102,"id":"4a29e4","input":"# recall\nSVC_recall = 96/(12+96)\nSVC_recall","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8888888888888888"},"exec_count":102}},"pos":113,"start":1657214861471,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861487,"exec_count":103,"id":"def9f0","input":"# F1 score\nSVC_F1 = (2*SVC_precision*SVC_recall)/(SVC_precision+SVC_recall)\nSVC_F1","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8495575221238938"},"exec_count":103}},"pos":114,"start":1657214861481,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861500,"exec_count":104,"id":"2bc119","input":"# accuracy\nSVC_accuracy = (96+59)/(96+12+59+22)\nSVC_accuracy","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8201058201058201"},"exec_count":104}},"pos":115,"start":1657214861497,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861517,"exec_count":105,"id":"1a936b","input":"# MSE\ntotal_squared_error = (np.sum((y_test - SVC_y_hat)**2))\nSVC_mean_squared_error = total_squared_error/len(y_test)\nprint(SVC_mean_squared_error)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.17989417989417988\n"}},"pos":116,"start":1657214861511,"state":"done","type":"cell"}
{"cell_type":"code","end":1657214861545,"exec_count":106,"id":"6fa24f","input":"#Decision Tree\nfrom sklearn import tree as tr\nfrom sklearn.metrics import confusion_matrix\ny_tree = df[\"target\"]\nx_tree = df.copy()\n\n","kernel":"ds_env","no_halt":true,"pos":117,"start":1657214861543,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":107,"id":"8f2395","input":"# Decision Tree splitting and fitting\nx_tree_train, x_tree_test, y_tree_train, y_tree_test = train_test_split(x_tree, y_tree, test_size=0.8)\nheart_disease_tree = tr.DecisionTreeClassifier(max_leaf_nodes=10, random_state = 42)\nheart_disease_tree.fit(x_tree_train, y_tree_train)\n\npredictions = heart_disease_tree.predict(x_tree_test)\n\nsns.heatmap(confusion_matrix(y_test, predictions))","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"NameError","evalue":"name 'predictions' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [107]\u001b[0m, in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m heart_disease_tree\u001b[38;5;241m.\u001b[39mfit(x_tree_train, y_tree_train)\n\u001b[1;32m      6\u001b[0m y_tree_hat \u001b[38;5;241m=\u001b[39m heart_disease_tree\u001b[38;5;241m.\u001b[39mpredict(x_tree_test)\n\u001b[0;32m----> 8\u001b[0m sns\u001b[38;5;241m.\u001b[39mheatmap(confusion_matrix(y_test, \u001b[43mpredictions\u001b[49m))\n","\u001b[0;31mNameError\u001b[0m: name 'predictions' is not defined"]}},"pos":118,"state":"done","type":"cell"}
{"cell_type":"code","id":"361db6","input":"","pos":83,"type":"cell"}
{"cell_type":"code","id":"44c13f","input":"","pos":15,"type":"cell"}
{"cell_type":"code","id":"542820","input":"","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"0a609f","input":"## Outliers in our data","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"233e52","input":"## Example to Remove Outliers","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"41aa78","input":"### Code Here\n\n","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5580a8","input":"## Splitting our Data\n\n","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"777aac","input":"Naive Bayes:\n\n","pos":46,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"813f06","input":"## The Model\n\n","pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b756ef","input":"## Scaling our Data","pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c60dce","input":"### Column Assignments\n\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d098ae","input":"Danh & Vicente - age, sex, cp, trestbps\n\nEvan & Alex - fbs, restecg, thalach, exang\n\nSophia & Hikaru -  oldpeak, slope, ca, thal\n\n","pos":11,"state":"done","type":"cell"}
{"id":"4dd8a9","input":"","pos":40.5,"type":"cell"}
{"id":0,"time":1657225208443,"type":"user"}
{"last_load":1657213654650,"type":"file"}