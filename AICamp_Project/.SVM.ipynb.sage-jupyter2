{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-ca5c6134-3c15-4b98-aa53-dda1216454ea.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"end":1657215402945,"exec_count":24,"id":"09d2a9","input":"df = pd.read_csv('heart.csv')","kernel":"ds_env","pos":1,"start":1657215402933,"state":"done","type":"cell"}
{"end":1657215424399,"exec_count":26,"id":"3a1967","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix","kernel":"ds_env","pos":0,"start":1657215424309,"state":"done","type":"cell"}
{"end":1657215426371,"exec_count":27,"id":"26cd64","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":27},"1":{"data":{"image/png":"8cd9da890928fbe53f1352b20367944efe4be76d","text/plain":"<Figure size 1080x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":1.5,"start":1657215426089,"state":"done","type":"cell"}
{"end":1657215428441,"exec_count":28,"id":"04dd7b","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\nprint(\"Lower limit for outliers in the column chol is \" + str(lower_limit))\nprint(\"Upper limit for outliers in the column chol is \" + str(upper_limit))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column chol is 115.0\nUpper limit for outliers in the column chol is 371.0\n"}},"pos":1.75,"start":1657215428415,"state":"done","type":"cell"}
{"end":1657215430625,"exec_count":29,"id":"f663e9","input":"df=df[df[\"chol\"] < upper_limit]\nsns.boxplot(df[\"chol\"])","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='chol'>"},"exec_count":29},"2":{"data":{"image/png":"bd145278975f3aae3b5d79f345c32046492e332e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":1.875,"start":1657215430513,"state":"done","type":"cell"}
{"end":1657215433217,"exec_count":30,"id":"9e0ca9","input":"# split data\ny = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","kernel":"ds_env","pos":2,"start":1657215433207,"state":"done","type":"cell"}
{"end":1657215435092,"exec_count":31,"id":"e179a7","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","kernel":"ds_env","pos":3,"start":1657215435071,"state":"done","type":"cell"}
{"end":1657215436730,"exec_count":32,"id":"9b0ce7","input":"SVC_model = SVC(kernel = 'linear')\nSVC_model.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>","text/plain":"SVC(kernel='linear')"},"exec_count":32}},"pos":4,"start":1657215436683,"state":"done","type":"cell"}
{"end":1657215438854,"exec_count":33,"id":"5db357","input":"SVC_y_hat = SVC_model.predict(x_test)\nSVC_y_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1,\n       1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,\n       0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1])"},"exec_count":33}},"pos":5,"start":1657215438831,"state":"done","type":"cell"}
{"end":1657215441131,"exec_count":34,"id":"78c4e1","input":"np.array(y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0,\n       1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0,\n       1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1,\n       1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0,\n       1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1])"},"exec_count":34}},"pos":5.5,"start":1657215441128,"state":"done","type":"cell"}
{"end":1657215443199,"exec_count":35,"id":"65a852","input":"# confusion matrix\nsns.heatmap(confusion_matrix(y_test, SVC_y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":35},"1":{"data":{"image/png":"8600fdd5c89bcbf89e442f0daf0aabcba2480712","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":6,"start":1657215442989,"state":"done","type":"cell"}
{"end":1657215476565,"exec_count":36,"id":"81b2a7","input":"# precision\nSVC_precision = 107/(20+107)\nSVC_precision","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.84251968503937"},"exec_count":36}},"pos":7,"start":1657215476561,"state":"done","type":"cell"}
{"end":1657215478148,"exec_count":37,"id":"01650e","input":"# recall\nSVC_recall = 107/(9+107)\nSVC_recall","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9224137931034483"},"exec_count":37}},"pos":8,"start":1657215478138,"state":"done","type":"cell"}
{"end":1657215480728,"exec_count":38,"id":"3e9261","input":"# F1 score\nSVC_F1 = (2*SVC_precision*SVC_recall)/(SVC_precision+SVC_recall)\nSVC_F1","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.8806584362139918"},"exec_count":38}},"pos":9,"start":1657215480722,"state":"done","type":"cell"}
{"end":1657215499250,"exec_count":39,"id":"732592","input":"# accuracy\nSVC_accuracy = (107+66)/(107+9+66+20)\nSVC_accuracy","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.8564356435643564"},"exec_count":39}},"pos":10,"start":1657215499244,"state":"done","type":"cell"}
{"end":1657215502799,"exec_count":40,"id":"25df58","input":"# MSE\ntotal_squared_error = (np.sum((y_test - SVC_y_hat)**2))\nSVC_mean_squared_error = total_squared_error/len(y_test)\nprint(SVC_mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.14356435643564355\n"}},"pos":11,"start":1657215502797,"state":"done","type":"cell"}
{"id":0,"time":1657214431257,"type":"user"}
{"last_load":1657213884493,"type":"file"}