{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-8073a763-f877-4627-a257-e7c61a77dc43.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657738477671,"exec_count":1,"id":"94aa98","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import recall_score","kernel":"ds_env","no_halt":true,"pos":0,"start":1657738475619,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738477709,"exec_count":2,"id":"68b85d","input":"df = pd.read_csv('heart.csv')","kernel":"ds_env","no_halt":true,"pos":1,"start":1657738477700,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738477728,"exec_count":3,"id":"e273d9","input":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","no_halt":true,"pos":2,"start":1657738477719,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738477741,"exec_count":4,"id":"4b212c","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"chol\"] < upper_limit]","kernel":"ds_env","no_halt":true,"pos":3,"start":1657738477734,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738477754,"exec_count":5,"id":"fd8810","input":"q1 = df.trestbps.quantile(0.25)\nq3 = df.trestbps.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"trestbps\"] < upper_limit]","kernel":"ds_env","no_halt":true,"pos":4,"start":1657738477747,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738477771,"exec_count":6,"id":"274555","input":"q1 = df.thalach.quantile(0.25)\nq3 = df.thalach.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\ndf=df[df[\"thalach\"] > lower_limit]","kernel":"ds_env","no_halt":true,"pos":5,"start":1657738477758,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738477789,"exec_count":7,"id":"5a7b78","input":"oldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]","kernel":"ds_env","no_halt":true,"pos":6,"start":1657738477776,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478195,"exec_count":8,"id":"c4ce59","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":8},"1":{"data":{"image/png":"19ae43052b5b520a74299204dd994fa6b96836dc","text/plain":"<Figure size 1080x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":7,"start":1657738477792,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478211,"exec_count":9,"id":"5744e4","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","kernel":"ds_env","no_halt":true,"pos":8,"start":1657738478207,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478229,"exec_count":10,"id":"f0f23c","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","kernel":"ds_env","no_halt":true,"pos":9,"start":1657738478226,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478610,"exec_count":11,"id":"127b8a","input":"from sklearn.ensemble import RandomForestClassifier\nForest_Model = RandomForestClassifier(n_estimators = 100, oob_score = True, n_jobs = 1, random_state = 1)\nForest_Model.fit(x_train, y_train)\ny_hat_forest = Forest_Model.predict(x_test)\ny_hat_forest","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":11}},"pos":10,"start":1657738478234,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478625,"exec_count":12,"id":"2edbab","input":"np.array(y_test)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":12}},"pos":11,"start":1657738478614,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478632,"exec_count":13,"id":"9d2ca0","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns","kernel":"ds_env","no_halt":true,"pos":12,"start":1657738478628,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478820,"exec_count":14,"id":"d7d6cb","input":"sns.heatmap(confusion_matrix(y_test, y_hat_forest), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":14},"1":{"data":{"image/png":"5dfc5843847f62ce004b2c24c6d44f6ef68768eb","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":13,"start":1657738478635,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478835,"exec_count":15,"id":"f05849","input":"#Precision\nRFPrecision = 81 / (0 + 81)\nprint(RFPrecision)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"1.0\n"}},"pos":14,"start":1657738478831,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478845,"exec_count":16,"id":"fd15e4","input":"RFRecall = 81 / (3+81)\nprint(RFRecall)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9642857142857143\n"}},"pos":15,"start":1657738478841,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478854,"exec_count":17,"id":"4d7946","input":"RFAccuracy = (81+105) / (81+105+3+0)\nprint(RFAccuracy)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9841269841269841\n"}},"pos":16,"start":1657738478850,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478866,"exec_count":18,"id":"2dbb5e","input":"RFF1 = (2 * RFPrecision * RFRecall) / (RFPrecision + RFRecall)\nprint(RFF1)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.9818181818181818\n"}},"pos":17,"start":1657738478862,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478887,"exec_count":19,"id":"5ef51d","input":"total_squared_error_RF = (np.sum((y_test - y_hat_forest)**2))\nmean_squared_error_RF = total_squared_error_RF/len(y_test)\nprint(mean_squared_error_RF)\n\n","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.015873015873015872\n"}},"pos":18,"start":1657738478881,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478900,"exec_count":20,"id":"02ea69","input":"recall_score(y_test, y_hat_forest)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9722222222222222"},"exec_count":20}},"pos":19,"start":1657738478893,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478908,"exec_count":21,"id":"7d608e","input":"from sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n","kernel":"ds_env","no_halt":true,"pos":21,"start":1657738478903,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478961,"exec_count":22,"id":"d9cca4","input":"from sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV as gs","kernel":"ds_env","no_halt":true,"pos":22,"start":1657738478911,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478973,"exec_count":23,"id":"d7c7f2","input":"# parameters = {n_estimators:(100),  'kernel': ('linear', 'rbf'), bootstrap=False} 'C':[1,10]\n# metrics = ['recall']\nfrom sklearn.ensemble import RandomForestClassifier\nparameters = {'n_estimators':(50, 100), 'bootstrap':(True, False), 'min_samples_leaf':(5, 10), 'oob_score':(True, False), 'warm_start':(True, False)}\n\n# #parameters = np.array(parameters)\n# #parameters\n\n# Need couple options for params, put in listor tuple","kernel":"ds_env","no_halt":true,"pos":24,"start":1657738478968,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738478982,"exec_count":24,"id":"3568a0","input":"Forest_Model = RandomForestClassifier(n_estimators = 100, oob_score = True, n_jobs = 1, random_state = 1)\nEmpty_Model = RandomForestClassifier()","kernel":"ds_env","no_halt":true,"pos":25,"start":1657738478977,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501343,"exec_count":25,"id":"612382","input":"svc = svm.SVC()\nclf = gs(Empty_Model, parameters, scoring = 'recall')\nclf.fit(x_train, y_train)\n\n# instance of rf class, create new var instance of empty w/ no arguments\n\n","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={&#x27;bootstrap&#x27;: (True, False),\n                         &#x27;min_samples_leaf&#x27;: (5, 10), &#x27;n_estimators&#x27;: (50, 100),\n                         &#x27;oob_score&#x27;: (True, False),\n                         &#x27;warm_start&#x27;: (True, False)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={&#x27;bootstrap&#x27;: (True, False),\n                         &#x27;min_samples_leaf&#x27;: (5, 10), &#x27;n_estimators&#x27;: (50, 100),\n                         &#x27;oob_score&#x27;: (True, False),\n                         &#x27;warm_start&#x27;: (True, False)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={'bootstrap': (True, False),\n                         'min_samples_leaf': (5, 10), 'n_estimators': (50, 100),\n                         'oob_score': (True, False),\n                         'warm_start': (True, False)},\n             scoring='recall')"},"exec_count":25}},"pos":26,"start":1657738478989,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501358,"exec_count":26,"id":"62bab4","input":"clf.best_estimator_","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(bootstrap=False, min_samples_leaf=5, n_estimators=50,\n                       warm_start=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(bootstrap=False, min_samples_leaf=5, n_estimators=50,\n                       warm_start=True)</pre></div></div></div></div></div>","text/plain":"RandomForestClassifier(bootstrap=False, min_samples_leaf=5, n_estimators=50,\n                       warm_start=True)"},"exec_count":26}},"pos":27,"start":1657738501354,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501373,"exec_count":27,"id":"ad4098","input":"clf.best_params_\n# Best params so far: {'bootstrap': False, 'min_samples_leaf': 5, 'n_estimators': 50, 'oob_score': False,'warm_start': True}","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"{'bootstrap': False,\n 'min_samples_leaf': 5,\n 'n_estimators': 50,\n 'oob_score': False,\n 'warm_start': True}"},"exec_count":27}},"pos":28,"start":1657738501363,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501385,"exec_count":28,"id":"85a0ed","input":"clf.best_score_","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9697151898734176"},"exec_count":28}},"pos":29,"start":1657738501377,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501411,"exec_count":29,"id":"2be0f6","input":"#Best Model\nparameters = {'n_estimators':(50), 'bootstrap':(False), 'min_samples_leaf':(5),'oob_score':(False), 'warm_start':(True)}\n\n","kernel":"ds_env","no_halt":true,"pos":30,"start":1657738501394,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501443,"exec_count":30,"id":"ee0ace","input":"clf.cv_results_","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"{'mean_fit_time': array([0.12709875, 0.12587357, 0.13146801, 0.09589314, 0.25749006,\n        0.25493488, 0.20207176, 0.20102744, 0.1217751 , 0.12446661,\n        0.09491587, 0.10405378, 0.24778771, 0.33611035, 0.26817784,\n        0.30129957, 0.00285897, 0.00439553, 0.1298799 , 0.07935948,\n        0.00059428, 0.00054874, 0.15817952, 0.15162096, 0.00062828,\n        0.00091639, 0.15390301, 0.08900981, 0.00060854, 0.00055857,\n        0.16055989, 0.20687199]),\n 'std_fit_time': array([3.41474377e-03, 1.98570837e-03, 7.37340841e-02, 4.49824127e-03,\n        2.77988385e-02, 1.99328195e-02, 2.97821363e-02, 2.15051066e-02,\n        1.92318574e-03, 4.16462631e-03, 2.48136069e-03, 2.10018374e-02,\n        1.08094074e-02, 1.38787984e-01, 7.30825431e-02, 1.74155803e-01,\n        3.81208363e-03, 3.62862754e-03, 1.01543577e-01, 2.85349137e-03,\n        7.74172110e-05, 3.50391287e-05, 1.24634779e-02, 1.91290799e-03,\n        6.21680091e-05, 1.94066959e-04, 1.17742619e-01, 1.50419494e-02,\n        1.11786191e-04, 3.99410258e-05, 2.59268533e-02, 9.16294167e-02]),\n 'mean_score_time': array([0.00774956, 0.00727406, 0.00753384, 0.00698047, 0.01254315,\n        0.01258721, 0.01277027, 0.01324739, 0.00690207, 0.00710258,\n        0.00814085, 0.00772882, 0.01350088, 0.02290134, 0.02236161,\n        0.02555466, 0.        , 0.        , 0.00968466, 0.00767913,\n        0.        , 0.        , 0.013624  , 0.01299968, 0.        ,\n        0.        , 0.01087985, 0.00999088, 0.        , 0.        ,\n        0.0138123 , 0.01331944]),\n 'std_score_time': array([3.97165023e-04, 1.88557933e-04, 1.03968385e-03, 2.05670949e-04,\n        1.37755061e-04, 4.73482793e-04, 1.17301676e-03, 1.21596519e-03,\n        6.22535701e-05, 2.84067652e-04, 1.48646842e-03, 1.04067874e-03,\n        2.35086084e-03, 1.29616050e-02, 1.40313748e-02, 1.41785290e-02,\n        0.00000000e+00, 0.00000000e+00, 2.97255627e-03, 8.13768520e-04,\n        0.00000000e+00, 0.00000000e+00, 1.75618080e-03, 9.50717809e-04,\n        0.00000000e+00, 0.00000000e+00, 6.23724672e-03, 2.36395060e-03,\n        0.00000000e+00, 0.00000000e+00, 1.77101165e-03, 1.85396445e-03]),\n 'param_bootstrap': masked_array(data=[True, True, True, True, True, True, True, True, True,\n                    True, True, True, True, True, True, True, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_min_samples_leaf': masked_array(data=[5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10,\n                    5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_n_estimators': masked_array(data=[50, 50, 50, 50, 100, 100, 100, 100, 50, 50, 50, 50,\n                    100, 100, 100, 100, 50, 50, 50, 50, 100, 100, 100, 100,\n                    50, 50, 50, 50, 100, 100, 100, 100],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_oob_score': masked_array(data=[True, True, False, False, True, True, False, False,\n                    True, True, False, False, True, True, False, False,\n                    True, True, False, False, True, True, False, False,\n                    True, True, False, False, True, True, False, False],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_warm_start': masked_array(data=[True, False, True, False, True, False, True, False,\n                    True, False, True, False, True, False, True, False,\n                    True, False, True, False, True, False, True, False,\n                    True, False, True, False, True, False, True, False],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'params': [{'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': True,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 5,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 50,\n   'oob_score': False,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': True,\n   'warm_start': False},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': True},\n  {'bootstrap': False,\n   'min_samples_leaf': 10,\n   'n_estimators': 100,\n   'oob_score': False,\n   'warm_start': False}],\n 'split0_test_score': array([0.9375, 0.9625, 0.95  , 0.95  , 0.9625, 0.95  , 0.9625, 0.9625,\n        0.9375, 0.9375, 0.9375, 0.925 , 0.9375, 0.9375, 0.925 , 0.925 ,\n           nan,    nan, 0.9625, 0.9625,    nan,    nan, 0.9625, 0.9625,\n           nan,    nan, 0.9375, 0.95  ,    nan,    nan, 0.9375, 0.9375]),\n 'split1_test_score': array([0.94936709, 0.98734177, 0.98734177, 0.97468354, 0.98734177,\n        0.98734177, 0.97468354, 0.98734177, 0.98734177, 0.94936709,\n        0.96202532, 0.98734177, 0.94936709, 0.98734177, 0.97468354,\n        0.98734177,        nan,        nan, 0.98734177, 0.96202532,\n               nan,        nan, 0.96202532, 0.98734177,        nan,\n               nan, 0.97468354, 0.98734177,        nan,        nan,\n        0.97468354, 0.98734177]),\n 'split2_test_score': array([0.92405063, 0.93670886, 0.92405063, 0.93670886, 0.89873418,\n        0.94936709, 0.92405063, 0.92405063, 0.88607595, 0.86075949,\n        0.91139241, 0.88607595, 0.89873418, 0.88607595, 0.89873418,\n        0.91139241,        nan,        nan, 0.97468354, 0.94936709,\n               nan,        nan, 0.97468354, 0.96202532,        nan,\n               nan, 0.92405063, 0.97468354,        nan,        nan,\n        0.92405063, 0.94936709]),\n 'split3_test_score': array([0.84810127, 0.86075949, 0.92405063, 0.91139241, 0.89873418,\n        0.87341772, 0.88607595, 0.87341772, 0.82278481, 0.81012658,\n        0.84810127, 0.84810127, 0.83544304, 0.84810127, 0.83544304,\n        0.82278481,        nan,        nan, 0.92405063, 0.92405063,\n               nan,        nan, 0.92405063, 0.93670886,        nan,\n               nan, 0.88607595, 0.88607595,        nan,        nan,\n        0.89873418, 0.88607595]),\n 'split4_test_score': array([0.97468354, 0.97468354, 0.97468354, 0.97468354, 0.97468354,\n        0.98734177, 0.98734177, 0.97468354, 0.97468354, 0.94936709,\n        0.93670886, 0.94936709, 0.96202532, 0.96202532, 0.97468354,\n        0.97468354,        nan,        nan, 1.        , 0.98734177,\n               nan,        nan, 0.98734177, 1.        ,        nan,\n               nan, 0.97468354, 0.98734177,        nan,        nan,\n        0.97468354, 0.97468354]),\n 'mean_test_score': array([0.92674051, 0.94439873, 0.95202532, 0.94949367, 0.94439873,\n        0.94949367, 0.94693038, 0.94439873, 0.92167722, 0.90142405,\n        0.91914557, 0.91917722, 0.91661392, 0.92420886, 0.92170886,\n        0.92424051,        nan,        nan, 0.96971519, 0.95705696,\n               nan,        nan, 0.96212025, 0.96971519,        nan,\n               nan, 0.93939873, 0.95708861,        nan,        nan,\n        0.94193038, 0.94699367]),\n 'std_test_score': array([0.04270276, 0.04504128, 0.02580665, 0.02401863, 0.03810363,\n        0.04159995, 0.03707419, 0.04133105, 0.06069435, 0.0563691 ,\n        0.03896519, 0.04845457, 0.0457812 , 0.05067344, 0.05214038,\n        0.0582841 ,        nan,        nan, 0.0260379 , 0.02059142,\n               nan,        nan, 0.02118212, 0.0220385 ,        nan,\n               nan, 0.0333842 , 0.03803455,        nan,        nan,\n        0.02949836, 0.03521769]),\n 'rank_test_score': array([16, 11,  6,  7, 11,  7, 10, 11, 20, 24, 22, 21, 23, 18, 19, 17, 25,\n        26,  1,  5, 27, 28,  3,  1, 29, 30, 15,  4, 31, 32, 14,  9],\n       dtype=int32)}"},"exec_count":30}},"pos":31,"scrolled":true,"start":1657738501422,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501453,"exec_count":31,"id":"f974d2","input":"Best_Model = RandomForestClassifier(n_estimators = (50), bootstrap = (False), min_samples_leaf = (5), oob_score = (False), warm_start = (True))","kernel":"ds_env","no_halt":true,"pos":33,"start":1657738501450,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501467,"exec_count":32,"id":"4ebf64","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)\n","kernel":"ds_env","no_halt":true,"pos":34,"start":1657738501463,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501577,"exec_count":33,"id":"35a3d7","input":"x_best_train = scaler.fit_transform(x_train)\nx_best_test = scaler.transform(x_test)\nBest_Model.fit(x_best_train, y_train)\ny_hat_forest = Best_Model.predict(x_best_test)\n","kernel":"ds_env","no_halt":true,"pos":35,"start":1657738501480,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501608,"exec_count":34,"id":"2860bd","input":"recall_score(y_test, y_hat_forest)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.9907407407407407"},"exec_count":34}},"pos":38,"start":1657738501590,"state":"done","type":"cell"}
{"cell_type":"code","end":1657738501810,"exec_count":35,"id":"5dce6b","input":"# Heatmap\nsns.heatmap(confusion_matrix(y_test, y_hat_forest), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":35},"1":{"data":{"image/png":"decf707f2dc3e751279c830b3b044c99c553ca65","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":39,"start":1657738501614,"state":"done","type":"cell"}
{"cell_type":"code","id":"042bcd","input":"","pos":36,"type":"cell"}
{"cell_type":"code","id":"5fdb91","input":"","pos":23,"type":"cell"}
{"cell_type":"code","id":"eb53df","input":"","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"228ce7","input":"# Recall score: recall\\_score\\(y\\_test, y\\_hat\\_forest\\)\n\n","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"59fff4","input":"# **The best model turns out to be a RandomForestClassifier instance with n\\_estimators = \\(50\\), bootstrap = \\(False\\), min\\_samples\\_leaf = \\(5\\), oob\\_score = \\(False\\), warm\\_start = \\(True\\).**\n\n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"c192a5","input":"**Finding best parameters**\n","pos":20,"type":"cell"}
{"id":0,"time":1657738437410,"type":"user"}
{"last_load":1657737688943,"type":"file"}