{"backend_state":"init","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-83784572-9698-470c-9228-f6d939672acb.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"042bcd","input":"","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5fdb91","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"eb53df","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":125,"id":"3568a0","input":"Forest_Model = RandomForestClassifier(n_estimators = 100, oob_score = True, n_jobs = 1, random_state = 1)\nEmpty_Model = RandomForestClassifier()","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":128,"id":"ee0ace","input":"clf.cv_results_","output":{"0":{"data":{"text/plain":"{'mean_fit_time': array([0.07077131, 0.14508128, 0.07980304, 0.16433234, 0.05768757,\n        0.14603286, 0.05572567, 0.11302543]),\n 'std_fit_time': array([0.00232693, 0.00604151, 0.02079759, 0.05386259, 0.00060212,\n        0.0632264 , 0.00027913, 0.00311671]),\n 'mean_score_time': array([0.00660572, 0.01253862, 0.00864978, 0.01160417, 0.00682545,\n        0.01193686, 0.00662618, 0.01141362]),\n 'std_score_time': array([0.00029057, 0.00076067, 0.00428373, 0.00038847, 0.00030517,\n        0.0003662 , 0.00023392, 0.00028651]),\n 'param_bootstrap': masked_array(data=[True, True, True, True, False, False, False, False],\n              mask=[False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_min_samples_leaf': masked_array(data=[5, 5, 10, 10, 5, 5, 10, 10],\n              mask=[False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_n_estimators': masked_array(data=[50, 100, 50, 100, 50, 100, 50, 100],\n              mask=[False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'params': [{'bootstrap': True, 'min_samples_leaf': 5, 'n_estimators': 50},\n  {'bootstrap': True, 'min_samples_leaf': 5, 'n_estimators': 100},\n  {'bootstrap': True, 'min_samples_leaf': 10, 'n_estimators': 50},\n  {'bootstrap': True, 'min_samples_leaf': 10, 'n_estimators': 100},\n  {'bootstrap': False, 'min_samples_leaf': 5, 'n_estimators': 50},\n  {'bootstrap': False, 'min_samples_leaf': 5, 'n_estimators': 100},\n  {'bootstrap': False, 'min_samples_leaf': 10, 'n_estimators': 50},\n  {'bootstrap': False, 'min_samples_leaf': 10, 'n_estimators': 100}],\n 'split0_test_score': array([0.95  , 0.9375, 0.9125, 0.9125, 0.95  , 0.9625, 0.95  , 0.95  ]),\n 'split1_test_score': array([0.97468354, 0.98734177, 0.97468354, 0.98734177, 0.98734177,\n        0.98734177, 0.97468354, 0.96202532]),\n 'split2_test_score': array([0.91139241, 0.92405063, 0.91139241, 0.88607595, 0.97468354,\n        0.97468354, 0.91139241, 0.94936709]),\n 'split3_test_score': array([0.89873418, 0.88607595, 0.78481013, 0.81012658, 0.92405063,\n        0.92405063, 0.87341772, 0.88607595]),\n 'split4_test_score': array([0.96202532, 0.98734177, 0.94936709, 0.96202532, 0.98734177,\n        1.        , 0.97468354, 0.97468354]),\n 'mean_test_score': array([0.93936709, 0.94446203, 0.90655063, 0.91161392, 0.96468354,\n        0.96971519, 0.93683544, 0.94443038]),\n 'std_test_score': array([0.02935072, 0.03886225, 0.06535278, 0.06201398, 0.02446806,\n        0.0260379 , 0.03926173, 0.03061198]),\n 'rank_test_score': array([5, 3, 8, 7, 2, 1, 6, 4], dtype=int32)}"},"exec_count":128,"output_type":"execute_result"}},"pos":31,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":131,"id":"d7c7f2","input":"# parameters = {n_estimators:(100),  'kernel': ('linear', 'rbf'), bootstrap=False} 'C':[1,10]\n# metrics = ['recall']\nfrom sklearn.ensemble import RandomForestClassifier\nparameters = {'n_estimators':(50, 100), 'bootstrap':(True, False), 'min_samples_leaf':(5, 10), 'oob_score':(True, False), 'warm_start':(True, False)}\n\n# #parameters = np.array(parameters)\n# #parameters\n\n# Need couple options for params, put in listor tuple","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":132,"id":"612382","input":"svc = svm.SVC()\nclf = gs(Empty_Model, parameters, scoring = 'recall')\nclf.fit(x_train, y_train)\n\n# instance of rf class, create new var instance of empty w/ no arguments\n\n","output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={&#x27;bootstrap&#x27;: (True, False),\n                         &#x27;min_samples_leaf&#x27;: (5, 10), &#x27;n_estimators&#x27;: (50, 100),\n                         &#x27;oob_score&#x27;: (True, False),\n                         &#x27;warm_start&#x27;: (True, False)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={&#x27;bootstrap&#x27;: (True, False),\n                         &#x27;min_samples_leaf&#x27;: (5, 10), &#x27;n_estimators&#x27;: (50, 100),\n                         &#x27;oob_score&#x27;: (True, False),\n                         &#x27;warm_start&#x27;: (True, False)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid={'bootstrap': (True, False),\n                         'min_samples_leaf': (5, 10), 'n_estimators': (50, 100),\n                         'oob_score': (True, False),\n                         'warm_start': (True, False)},\n             scoring='recall')"},"exec_count":132,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":134,"id":"ad4098","input":"clf.best_params_\n# Best params so far: {'bootstrap': False, 'min_samples_leaf': 5, 'n_estimators': 50, 'oob_score': False,'warm_start': True}","output":{"0":{"data":{"text/plain":"{'bootstrap': False,\n 'min_samples_leaf': 5,\n 'n_estimators': 50,\n 'oob_score': False,\n 'warm_start': True}"},"exec_count":134,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":135,"id":"62bab4","input":"clf.best_estimator_","output":{"0":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(bootstrap=False, min_samples_leaf=5, n_estimators=50,\n                       warm_start=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(bootstrap=False, min_samples_leaf=5, n_estimators=50,\n                       warm_start=True)</pre></div></div></div></div></div>","text/plain":"RandomForestClassifier(bootstrap=False, min_samples_leaf=5, n_estimators=50,\n                       warm_start=True)"},"exec_count":135,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":145,"id":"2be0f6","input":"#Best Model\nparameters = {'n_estimators':(50), 'bootstrap':(False), 'min_samples_leaf':(5),'oob_score':(False), 'warm_start':(True)}\n\n","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":151,"id":"f974d2","input":"Best_Model = RandomForestClassifier(n_estimators = (50), bootstrap = (False), min_samples_leaf = (5), oob_score = (False), warm_start = (True))","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":152,"id":"4ebf64","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)\n","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":157,"id":"35a3d7","input":"x_best_train = scaler.fit_transform(x_train)\nx_best_test = scaler.transform(x_test)\nBest_Model.fit(x_best_train, y_train)\ny_hat_forest = Best_Model.predict(x_best_test)\n","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":158,"id":"2860bd","input":"recall_score(y_test, y_hat_forest)","output":{"0":{"data":{"text/plain":"0.9259259259259259"},"exec_count":158,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":159,"id":"85a0ed","input":"clf.best_score_","output":{"0":{"data":{"text/plain":"0.9722468354430379"},"exec_count":159,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":160,"id":"5dce6b","input":"# Heatmap\nsns.heatmap(confusion_matrix(y_test, y_hat_forest), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":160,"output_type":"execute_result"},"1":{"data":{"image/png":"1536343bbf88cea873c0fd7caaee4a5951ac2e48","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":160,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"68b85d","input":"df = pd.read_csv('heart.csv')","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"e273d9","input":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"4b212c","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"chol\"] < upper_limit]","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"fd8810","input":"q1 = df.trestbps.quantile(0.25)\nq3 = df.trestbps.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"trestbps\"] < upper_limit]","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"274555","input":"q1 = df.thalach.quantile(0.25)\nq3 = df.thalach.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\ndf=df[df[\"thalach\"] > lower_limit]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"5a7b78","input":"oldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"c4ce59","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":51,"output_type":"execute_result"},"1":{"data":{"image/png":"19ae43052b5b520a74299204dd994fa6b96836dc","text/plain":"<Figure size 1080x360 with 1 Axes>"},"exec_count":51,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"5744e4","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"f0f23c","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"2edbab","input":"np.array(y_test)","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":55,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"9d2ca0","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"d7d6cb","input":"sns.heatmap(confusion_matrix(y_test, y_hat_forest), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":57,"output_type":"execute_result"},"1":{"data":{"image/png":"5dfc5843847f62ce004b2c24c6d44f6ef68768eb","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":57,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"f05849","input":"#Precision\nRFPrecision = 81 / (0 + 81)\nprint(RFPrecision)","output":{"0":{"name":"stdout","output_type":"stream","text":"1.0\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"fd15e4","input":"RFRecall = 81 / (3+81)\nprint(RFRecall)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.9642857142857143\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"4d7946","input":"RFAccuracy = (81+105) / (81+105+3+0)\nprint(RFAccuracy)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.9841269841269841\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"2dbb5e","input":"RFF1 = (2 * RFPrecision * RFRecall) / (RFPrecision + RFRecall)\nprint(RFF1)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.9818181818181818\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"5ef51d","input":"total_squared_error_RF = (np.sum((y_test - y_hat_forest)**2))\nmean_squared_error_RF = total_squared_error_RF/len(y_test)\nprint(mean_squared_error_RF)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"0.015873015873015872\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"94aa98","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import recall_score","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"02ea69","input":"recall_score(y_test, y_hat_forest)","output":{"0":{"data":{"text/plain":"0.9722222222222222"},"exec_count":66,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"7d608e","input":"from sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"d9cca4","input":"from sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV as gs","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":86,"id":"127b8a","input":"from sklearn.ensemble import RandomForestClassifier\nForest_Model = RandomForestClassifier(n_estimators = 100, oob_score = True, n_jobs = 1, random_state = 1)\nForest_Model.fit(x_train, y_train)\ny_hat_forest = Forest_Model.predict(x_test)\ny_hat_forest","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":86,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"228ce7","input":"# Recall score: recall\\_score\\(y\\_test, y\\_hat\\_forest\\)\n\n","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"59fff4","input":"# **The best model turns out to be a RandomForestClassifier instance with n\\_estimators = \\(50\\), bootstrap = \\(False\\), min\\_samples\\_leaf = \\(5\\), oob\\_score = \\(False\\), warm\\_start = \\(True\\).**\n\n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"c192a5","input":"**Finding best parameters**\n","pos":20,"type":"cell"}
{"id":0,"time":1657572984478,"type":"user"}
{"last_load":1657563068073,"type":"file"}