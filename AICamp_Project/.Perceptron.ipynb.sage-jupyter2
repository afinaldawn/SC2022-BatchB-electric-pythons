{"backend_state":"init","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-0e8723ce-2b3a-4d3e-b6b3-c20c794729af.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"e54fe9","input":"**Metrics:**\n\nPrecision: 0.9629629629629629 |\nRecall: 0.975 |\nF1: 0.9689440993788819 |\nAccuracy: 97.35449735449735% |\nMSE: 0.026455026455026454\n\n\n\n","pos":19,"type":"cell"}
{"end":1657214178126,"exec_count":2,"id":"f00231","input":"df = pd.read_csv('heart.csv')","kernel":"ds_env","pos":1,"start":1657214178099,"state":"done","type":"cell"}
{"end":1657214215846,"exec_count":3,"id":"879b37","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\nprint(\"Lower limit for outliers in the column chol is \" + str(lower_limit))\nprint(\"Upper limit for outliers in the column chol is \" + str(upper_limit))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column chol is 115.0\nUpper limit for outliers in the column chol is 371.0\n"}},"pos":2,"start":1657214215836,"state":"done","type":"cell"}
{"end":1657214234155,"exec_count":4,"id":"c13c5b","input":"df=df[df[\"chol\"] < upper_limit]\nsns.boxplot(df[\"chol\"])","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='chol'>"},"exec_count":4},"2":{"data":{"image/png":"bd145278975f3aae3b5d79f345c32046492e332e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":3,"start":1657214234012,"state":"done","type":"cell"}
{"end":1657214379357,"exec_count":7,"id":"ea6697","input":"sns.boxplot(df[\"trestbps\"])","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='trestbps'>"},"exec_count":7},"2":{"data":{"image/png":"7357002865646da947e616b76f758c6bff88a641","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":4,"start":1657214379253,"state":"done","type":"cell"}
{"end":1657214398236,"exec_count":8,"id":"65eef2","input":"q1t = df.trestbps.quantile(0.25)\nq3t = df.trestbps.quantile(0.75)\nIQR = q3t-q1t\n\nlower_limitt = q1t- (1.5*IQR)\nupper_limitt = q3t+ (1.5*IQR)\nprint(\"Lower limit for outliers in the column trestbps is \" + str(lower_limitt))\nprint(\"Upper limit for outliers in the column trestbps is \" + str(upper_limitt))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column trestbps is 90.0\nUpper limit for outliers in the column trestbps is 170.0\n"}},"pos":5,"start":1657214398230,"state":"done","type":"cell"}
{"end":1657214410216,"exec_count":9,"id":"714c44","input":"df = df[df['trestbps']< upper_limitt]\ndf.head()\nsns.boxplot(df['trestbps'])","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='trestbps'>"},"exec_count":9},"2":{"data":{"image/png":"b3e4ee6f798423b6eb9a6abd76cde1fd94a2e493","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":6,"start":1657214410121,"state":"done","type":"cell"}
{"end":1657214477582,"exec_count":10,"id":"ac7c53","input":"thalach_q1 = df.thalach.quantile(0.25)\nthalach_q3 = df.thalach.quantile(0.75)\nthalach_IQR = thalach_q3 - thalach_q1\nth_lower_limit = thalach_q1 - 1.5 * thalach_IQR\nth_upper_limit = thalach_q3 + 1.5 * thalach_IQR\nprint(\"Lower limit for outliers in the column thalach is \" + str(th_lower_limit))\nprint(\"Upper limit for outliers in the column thalach \" + str(th_upper_limit))\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column thalach is 78.0\nUpper limit for outliers in the column thalach 222.0\n"}},"pos":7,"start":1657214477572,"state":"done","type":"cell"}
{"end":1657214489373,"exec_count":11,"id":"d2afed","input":"df=df[df[\"thalach\"] > th_lower_limit]\nsns.boxplot(df[\"thalach\"])","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<AxesSubplot:xlabel='thalach'>"},"exec_count":11},"2":{"data":{"image/png":"96999f7f33c1fc041f92362e0a95388fb9ad7044","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":8,"start":1657214489273,"state":"done","type":"cell"}
{"end":1657214528964,"exec_count":12,"id":"2a396f","input":"df.oldpeak.describe()\noldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\nprint(\"Lower limit for outliers in the column chol is \" + str(oldpeak_lower_limit))\nprint(\"Upper limit for outliers in the column chol is \" + str(oldpeak_upper_limit))\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]\nsns.boxplot(df[\"oldpeak\"])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Lower limit for outliers in the column chol is -2.4000000000000004\nUpper limit for outliers in the column chol is 4.0\n"},"1":{"name":"stderr","text":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"2":{"data":{"text/plain":"<AxesSubplot:xlabel='oldpeak'>"},"exec_count":12},"3":{"data":{"image/png":"4c82ee71c5a3fbe0d00c75ff35041432c9b53158","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":9,"start":1657214528776,"state":"done","type":"cell"}
{"end":1657214558382,"exec_count":13,"id":"71ac83","input":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","pos":10,"start":1657214558328,"state":"done","type":"cell"}
{"end":1657214573775,"exec_count":14,"id":"39acf6","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)","kernel":"ds_env","pos":11,"start":1657214573762,"state":"done","type":"cell"}
{"end":1657214585117,"exec_count":15,"id":"c47b7f","input":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","kernel":"ds_env","pos":12,"start":1657214585112,"state":"done","type":"cell"}
{"end":1657214595383,"exec_count":16,"id":"e152ee","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","kernel":"ds_env","pos":13,"start":1657214595374,"state":"done","type":"cell"}
{"end":1657214623909,"exec_count":17,"id":"f53352","input":"from sklearn.linear_model import Perceptron #Perceptron ","kernel":"ds_env","pos":14,"start":1657214623783,"state":"done","type":"cell"}
{"end":1657214636262,"exec_count":18,"id":"be6cd1","input":"my_Perceptron_Model = Perceptron(random_state=1, n_jobs = -1, eta0 = 1)\nmy_Perceptron_Model.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Perceptron(eta0=1, n_jobs=-1, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Perceptron</label><div class=\"sk-toggleable__content\"><pre>Perceptron(eta0=1, n_jobs=-1, random_state=1)</pre></div></div></div></div></div>","text/plain":"Perceptron(eta0=1, n_jobs=-1, random_state=1)"},"exec_count":18}},"pos":15,"start":1657214636248,"state":"done","type":"cell"}
{"end":1657214645695,"exec_count":19,"id":"a81fe8","input":"y_hat_Perceptron = my_Perceptron_Model.predict(x_test)","kernel":"ds_env","pos":16,"start":1657214645692,"state":"done","type":"cell"}
{"end":1657214658396,"exec_count":20,"id":"d8a296","input":"total_squared_error_Perceptron = (np.sum((y_test - y_hat_Perceptron)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error_Perceptron = total_squared_error_Perceptron/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error_Perceptron)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.17989417989417988\n"}},"pos":17,"start":1657214658392,"state":"done","type":"cell"}
{"end":1657214841789,"exec_count":22,"id":"ae5994","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.metrics import confusion_matrix\nfrom xgboost import XGBClassifier\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score","kernel":"ds_env","pos":0,"start":1657214841742,"state":"done","type":"cell"}
{"end":1657214851005,"exec_count":23,"id":"ee4a2b","input":"sns.heatmap(confusion_matrix(y_test, y_hat_Perceptron), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":23},"1":{"data":{"image/png":"9ab399a60697b586a799334c406e20a3a5e2fdf3","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":18,"scrolled":true,"start":1657214850778,"state":"done","type":"cell"}
{"id":"910c93","input":"","pos":20,"type":"cell"}
{"id":0,"time":1657563019857,"type":"user"}
{"last_load":1657214144801,"type":"file"}