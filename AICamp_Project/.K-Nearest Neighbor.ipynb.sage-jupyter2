{"backend_state":"running","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-a52223cf-4327-4e4f-8f8c-8d837bda8312.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"cell_type":"code","end":1657224497109,"exec_count":136,"id":"e8fe8a","input":"recall_score(y_test, y_hat_KNN_2)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9444444444444444"},"exec_count":136}},"pos":16,"start":1657224497104,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":114,"id":"d760d9","input":"KNN_2 = KNN(n_neighbors = 1, weights = 'uniform', p =3 )\n\n","kernel":"ds_env","pos":25.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"134ad8","input":"## best model is default with n_neighbors = 3, recall for that model is .9814\n## or n_neighbors = 7, weights = \"distance\"","pos":34.5,"type":"cell"}
{"cell_type":"markdown","id":"de3f2a","input":"**Metrics:**\n\nPrecision: 0.9629629629629629 |\nRecall: 0.975 |\nF1: 0.9689440993788819 |\nAccuracy: 97.35449735449735% |\nMSE: 0.026455026455026454\n\n","pos":15,"type":"cell"}
{"end":1657215313226,"exec_count":2,"id":"87e42b","input":"df = pd.read_csv('heart.csv')","kernel":"ds_env","pos":1,"start":1657215313218,"state":"done","type":"cell"}
{"end":1657215323131,"exec_count":3,"id":"43a327","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":3},"1":{"data":{"image/png":"8cd9da890928fbe53f1352b20367944efe4be76d","text/plain":"<Figure size 1080x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":2,"start":1657215322784,"state":"done","type":"cell"}
{"end":1657215333949,"exec_count":4,"id":"104865","input":"q1 = df.chol.quantile(0.25)\nq3 = df.chol.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"chol\"] < upper_limit]","kernel":"ds_env","pos":3,"start":1657215333937,"state":"done","type":"cell"}
{"end":1657215346186,"exec_count":5,"id":"94f646","input":"q1 = df.trestbps.quantile(0.25)\nq3 = df.trestbps.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\ndf=df[df[\"trestbps\"] < upper_limit]","kernel":"ds_env","pos":4,"start":1657215346180,"state":"done","type":"cell"}
{"end":1657215359185,"exec_count":6,"id":"ba49b0","input":"q1 = df.thalach.quantile(0.25)\nq3 = df.thalach.quantile(0.75)\nIQR = q3 - q1\nlower_limit = q1 - 1.5 * IQR\ndf=df[df[\"thalach\"] > lower_limit]","kernel":"ds_env","pos":5,"start":1657215359179,"state":"done","type":"cell"}
{"end":1657215371510,"exec_count":7,"id":"007ad6","input":"oldpeak_q1 = df.oldpeak.quantile(0.25)\noldpeak_q3 = df.oldpeak.quantile(0.75)\noldpeak_IQR = oldpeak_q3 - oldpeak_q1\noldpeak_lower_limit = oldpeak_q1 - 1.5 * oldpeak_IQR\noldpeak_upper_limit = oldpeak_q3 + 1.5 * oldpeak_IQR\ndf=df[df[\"oldpeak\"] < oldpeak_upper_limit]","kernel":"ds_env","pos":6,"start":1657215371504,"state":"done","type":"cell"}
{"end":1657215387762,"exec_count":8,"id":"1584bb","input":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df,orient='h')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":8},"1":{"data":{"image/png":"19ae43052b5b520a74299204dd994fa6b96836dc","text/plain":"<Figure size 1080x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":7,"start":1657215387462,"state":"done","type":"cell"}
{"end":1657215399692,"exec_count":9,"id":"d26294","input":"y = df[\"target\"]\nx = df.drop(\"target\", axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)","kernel":"ds_env","pos":8,"start":1657215399685,"state":"done","type":"cell"}
{"end":1657215412930,"exec_count":10,"id":"7568cb","input":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","kernel":"ds_env","pos":9,"start":1657215412922,"state":"done","type":"cell"}
{"end":1657215619581,"exec_count":17,"id":"25984a","input":"sns.heatmap(confusion_matrix(y_test, y_hat_KNN), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":17},"1":{"data":{"image/png":"b71e776f108e64f3e7b4f3a87222fe83c4dbff5b","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14,"start":1657215619394,"state":"done","type":"cell"}
{"end":1657218185534,"exec_count":46,"id":"8cac18","input":"from sklearn import neighbors","kernel":"ds_env","pos":23,"start":1657218185531,"state":"done","type":"cell"}
{"end":1657218275184,"exec_count":52,"id":"dc4afd","input":"clf1.fit(x_train,y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" checked><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7, weights='distance')"},"exec_count":52}},"pos":25,"start":1657218275174,"state":"done","type":"cell"}
{"end":1657218286165,"exec_count":53,"id":"d51477","input":"print(clf1)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"KNeighborsClassifier(n_neighbors=7, weights='distance')\n"}},"pos":26,"start":1657218286161,"state":"done","type":"cell"}
{"end":1657218316726,"exec_count":55,"id":"782a83","input":"KNN_hat = clf.predict(x_test)\nKNN_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":55}},"pos":27,"start":1657218316716,"state":"done","type":"cell"}
{"end":1657218471414,"exec_count":70,"id":"8c5f59","input":"clf.cv_results_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'mean_fit_time': array([0.00171227, 0.0011745 , 0.00113854, 0.00120015, 0.00122285,\n        0.00128236, 0.00161796, 0.00126729, 0.0012455 , 0.00117731,\n        0.00115027, 0.00120111, 0.00175347, 0.00119181, 0.00118833,\n        0.00123291, 0.00172944, 0.00140882, 0.00124769, 0.00123315,\n        0.00097532, 0.00098133, 0.00112476, 0.00099459, 0.00096126,\n        0.00097313, 0.00099583, 0.00118375, 0.00112543, 0.00097399,\n        0.00098252, 0.00098209, 0.00112076, 0.00102463, 0.00100203,\n        0.0010591 , 0.00097432, 0.00098352, 0.00107512, 0.00095658,\n        0.00118999, 0.00126352, 0.00123286, 0.00120778, 0.00130444,\n        0.0011848 , 0.00147662, 0.00121398, 0.00127974, 0.00125909,\n        0.00127883, 0.00120926, 0.00121217, 0.00121722, 0.00122256,\n        0.0012217 , 0.00127954, 0.00132136, 0.00126762, 0.00116286,\n        0.00074296, 0.00069799, 0.00080576, 0.00077262, 0.00082502,\n        0.00071168, 0.00074177, 0.00071425, 0.0007442 , 0.00077114,\n        0.00076389, 0.0007194 , 0.00078726, 0.00078058, 0.00082588,\n        0.00076218, 0.00077248, 0.00078511, 0.00081735, 0.00078721]),\n 'std_fit_time': array([7.82366699e-04, 5.27454754e-05, 1.51583225e-05, 6.38631479e-05,\n        5.72079406e-05, 5.71776468e-05, 7.97426691e-04, 2.59033929e-04,\n        9.43409996e-05, 4.37374318e-05, 2.20325600e-05, 4.82255195e-05,\n        9.88854278e-04, 3.09008874e-05, 5.27265046e-05, 7.03693395e-05,\n        4.57078436e-04, 3.53952082e-04, 1.10731650e-04, 6.39524497e-05,\n        3.97135223e-05, 5.21941780e-05, 1.99169156e-04, 4.20273462e-05,\n        2.48602792e-05, 3.09211893e-05, 4.49005931e-05, 3.06340469e-04,\n        2.41385294e-04, 5.73655911e-05, 4.90623496e-05, 4.85005511e-05,\n        2.58691273e-04, 7.02262481e-05, 2.60666425e-05, 2.02382037e-04,\n        3.97098580e-05, 3.28759770e-05, 1.68310994e-04, 2.66898498e-05,\n        1.40483899e-04, 2.48439692e-04, 1.04689052e-04, 8.09010697e-05,\n        1.26488946e-04, 3.58036444e-05, 3.66815444e-04, 3.69668449e-05,\n        1.65178112e-04, 1.23410302e-04, 7.74456653e-05, 5.77953388e-05,\n        4.50784912e-05, 6.38168825e-05, 4.69885217e-05, 2.70847703e-05,\n        7.65899638e-05, 5.46261452e-05, 7.89225855e-05, 4.97466179e-05,\n        4.02783193e-05, 1.75081722e-05, 1.01777605e-04, 4.50785416e-05,\n        7.71023125e-05, 5.33546476e-06, 4.85850969e-05, 3.83684761e-05,\n        3.38875256e-05, 2.38488187e-05, 5.69639816e-05, 2.71489990e-05,\n        4.48536259e-05, 6.18722627e-05, 1.01431009e-04, 6.24265985e-05,\n        4.86130747e-05, 4.64518695e-05, 5.60196200e-05, 3.65272203e-05]),\n 'mean_score_time': array([0.00643077, 0.00201311, 0.00563841, 0.00270214, 0.00649805,\n        0.00330944, 0.00668287, 0.0042902 , 0.00671496, 0.00361981,\n        0.00666976, 0.00456181, 0.00693717, 0.00376282, 0.00743895,\n        0.00376353, 0.00839405, 0.00448213, 0.00739489, 0.00401492,\n        0.00547686, 0.0031527 , 0.00593419, 0.00298381, 0.00591559,\n        0.00289044, 0.00601525, 0.00371017, 0.00649948, 0.00307679,\n        0.00606151, 0.00306249, 0.00730653, 0.00314217, 0.00616031,\n        0.00346332, 0.00612516, 0.00324621, 0.00636001, 0.00325718,\n        0.00482755, 0.00215483, 0.00591302, 0.00260482, 0.00663724,\n        0.00333114, 0.00858335, 0.00353732, 0.00680413, 0.00363221,\n        0.00693088, 0.00367575, 0.0067616 , 0.0038806 , 0.00690751,\n        0.00387793, 0.00700126, 0.00397615, 0.0069315 , 0.00388994,\n        0.00739193, 0.00277305, 0.0078567 , 0.00289917, 0.00797539,\n        0.00282211, 0.00751295, 0.00288196, 0.00768414, 0.00300527,\n        0.00771809, 0.0030396 , 0.01064157, 0.00326595, 0.00774484,\n        0.00322094, 0.00787468, 0.00327926, 0.00813656, 0.00348587]),\n 'std_score_time': array([2.66574011e-03, 2.31423767e-05, 1.49865102e-04, 7.33890340e-05,\n        1.65711334e-04, 1.15363002e-04, 1.50068161e-04, 9.27122527e-04,\n        8.78217805e-05, 5.08844905e-05, 4.36802097e-05, 1.66972312e-03,\n        3.31974139e-04, 5.28243467e-05, 1.17219105e-03, 8.00959543e-05,\n        1.81269433e-03, 5.50882905e-04, 7.92044462e-05, 1.46547303e-04,\n        7.11984465e-05, 5.78382964e-04, 3.64262094e-04, 2.90848348e-04,\n        1.02586880e-04, 3.30023679e-05, 1.86872075e-04, 8.80388444e-04,\n        1.05636054e-03, 8.84114472e-05, 1.09913334e-04, 3.51506940e-05,\n        1.43885913e-03, 7.31547151e-05, 8.75476658e-05, 5.37442533e-04,\n        4.47631501e-05, 4.01183026e-05, 2.28058476e-04, 1.40082438e-04,\n        4.33288363e-05, 2.37661351e-04, 2.43218878e-04, 3.36893467e-05,\n        2.23827718e-04, 8.45376474e-05, 2.26286344e-03, 1.33402863e-04,\n        2.76987092e-04, 1.44629875e-04, 3.64093395e-04, 6.99715922e-05,\n        8.92620056e-05, 1.24066358e-04, 1.72191530e-04, 4.46596630e-05,\n        4.57884355e-05, 8.20246404e-05, 4.35317070e-05, 3.30247515e-05,\n        8.95889338e-05, 1.64893778e-04, 4.42711591e-04, 1.61568163e-04,\n        8.60662822e-04, 1.18037993e-04, 1.11166032e-04, 1.32134786e-04,\n        1.49059524e-04, 1.20494118e-04, 1.64123305e-04, 1.25214296e-04,\n        3.75069563e-03, 1.34546565e-04, 9.50173150e-05, 9.75344269e-05,\n        5.99673489e-05, 7.92685521e-05, 7.90138595e-05, 1.52207765e-04]),\n 'param_algorithm': masked_array(data=['auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n                    'auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n                    'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n                    'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',\n                    'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',\n                    'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',\n                    'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',\n                    'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',\n                    'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree',\n                    'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree',\n                    'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree',\n                    'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree',\n                    'brute', 'brute', 'brute', 'brute', 'brute', 'brute',\n                    'brute', 'brute', 'brute', 'brute', 'brute', 'brute',\n                    'brute', 'brute', 'brute', 'brute', 'brute', 'brute',\n                    'brute', 'brute'],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_n_neighbors': masked_array(data=[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,\n                    10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,\n                    9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,\n                    8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n                    7, 7, 8, 8, 9, 9, 10, 10],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'param_weights': masked_array(data=['uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance',\n                    'uniform', 'distance', 'uniform', 'distance'],\n              mask=[False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False,\n                    False, False, False, False, False, False, False, False],\n        fill_value='?',\n             dtype=object),\n 'params': [{'algorithm': 'auto', 'n_neighbors': 1, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 1, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 2, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 2, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 3, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 3, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 4, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 4, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 5, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 5, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 6, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 6, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 7, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 7, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 8, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 8, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 9, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 9, 'weights': 'distance'},\n  {'algorithm': 'auto', 'n_neighbors': 10, 'weights': 'uniform'},\n  {'algorithm': 'auto', 'n_neighbors': 10, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 1, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 1, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 2, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 2, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 3, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 3, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 4, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 4, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 5, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 5, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 6, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 6, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 7, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 7, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 8, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 8, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 9, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 9, 'weights': 'distance'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 10, 'weights': 'uniform'},\n  {'algorithm': 'ball_tree', 'n_neighbors': 10, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 1, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 1, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 2, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 2, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 3, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 3, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 4, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 4, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 5, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 5, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 6, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 6, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 7, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 7, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 8, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 8, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 9, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 9, 'weights': 'distance'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 10, 'weights': 'uniform'},\n  {'algorithm': 'kd_tree', 'n_neighbors': 10, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 1, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 1, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 2, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 2, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 3, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 3, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 4, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 4, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 5, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 5, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 6, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 6, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 7, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 7, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 8, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 8, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 9, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 9, 'weights': 'distance'},\n  {'algorithm': 'brute', 'n_neighbors': 10, 'weights': 'uniform'},\n  {'algorithm': 'brute', 'n_neighbors': 10, 'weights': 'distance'}],\n 'split0_test_score': array([0.975 , 0.975 , 0.85  , 0.975 , 0.9   , 0.975 , 0.8   , 0.975 ,\n        0.875 , 1.    , 0.85  , 1.    , 0.875 , 1.    , 0.8625, 1.    ,\n        0.875 , 1.    , 0.85  , 1.    , 0.975 , 0.975 , 0.85  , 0.975 ,\n        0.9   , 0.975 , 0.8   , 0.975 , 0.875 , 1.    , 0.85  , 1.    ,\n        0.875 , 1.    , 0.8625, 1.    , 0.875 , 1.    , 0.85  , 1.    ,\n        0.975 , 0.975 , 0.85  , 0.975 , 0.9   , 0.975 , 0.8   , 0.975 ,\n        0.875 , 1.    , 0.85  , 1.    , 0.875 , 1.    , 0.8625, 1.    ,\n        0.875 , 1.    , 0.85  , 1.    , 0.975 , 0.975 , 0.85  , 0.975 ,\n        0.9   , 0.975 , 0.8   , 0.975 , 0.875 , 1.    , 0.85  , 1.    ,\n        0.875 , 1.    , 0.8625, 1.    , 0.875 , 1.    , 0.85  , 1.    ]),\n 'split1_test_score': array([1.        , 1.        , 0.94936709, 1.        , 0.96202532,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.88607595, 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.93670886, 1.        , 0.87341772, 1.        ,\n        1.        , 1.        , 0.94936709, 1.        , 0.96202532,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.88607595, 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.93670886, 1.        , 0.87341772, 1.        ,\n        1.        , 1.        , 0.94936709, 1.        , 0.96202532,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.88607595, 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.93670886, 1.        , 0.87341772, 1.        ,\n        1.        , 1.        , 0.94936709, 1.        , 0.96202532,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.88607595, 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.93670886, 1.        , 0.87341772, 1.        ]),\n 'split2_test_score': array([0.98734177, 0.98734177, 0.91139241, 0.98734177, 0.91139241,\n        0.98734177, 0.81012658, 0.98734177, 0.82278481, 0.98734177,\n        0.75949367, 0.98734177, 0.82278481, 0.97468354, 0.81012658,\n        0.97468354, 0.83544304, 0.97468354, 0.79746835, 0.98734177,\n        0.98734177, 0.98734177, 0.91139241, 0.98734177, 0.91139241,\n        0.98734177, 0.81012658, 0.98734177, 0.82278481, 0.98734177,\n        0.75949367, 0.98734177, 0.82278481, 0.97468354, 0.81012658,\n        0.97468354, 0.83544304, 0.97468354, 0.79746835, 0.98734177,\n        0.98734177, 0.98734177, 0.91139241, 0.98734177, 0.91139241,\n        0.98734177, 0.81012658, 0.98734177, 0.82278481, 0.98734177,\n        0.75949367, 0.98734177, 0.82278481, 0.97468354, 0.81012658,\n        0.97468354, 0.83544304, 0.97468354, 0.79746835, 0.98734177,\n        0.98734177, 0.98734177, 0.91139241, 0.98734177, 0.91139241,\n        0.98734177, 0.81012658, 0.98734177, 0.82278481, 0.98734177,\n        0.75949367, 0.98734177, 0.82278481, 0.97468354, 0.81012658,\n        0.97468354, 0.83544304, 0.97468354, 0.79746835, 0.98734177]),\n 'split3_test_score': array([0.97468354, 0.97468354, 0.83544304, 0.97468354, 0.86075949,\n        0.97468354, 0.75949367, 0.97468354, 0.82278481, 0.96202532,\n        0.7721519 , 0.96202532, 0.88607595, 0.98734177, 0.87341772,\n        0.98734177, 0.88607595, 1.        , 0.84810127, 1.        ,\n        0.97468354, 0.97468354, 0.83544304, 0.97468354, 0.86075949,\n        0.97468354, 0.75949367, 0.97468354, 0.82278481, 0.96202532,\n        0.7721519 , 0.96202532, 0.88607595, 0.98734177, 0.87341772,\n        0.98734177, 0.88607595, 1.        , 0.84810127, 1.        ,\n        0.97468354, 0.97468354, 0.83544304, 0.97468354, 0.86075949,\n        0.97468354, 0.75949367, 0.97468354, 0.82278481, 0.96202532,\n        0.7721519 , 0.96202532, 0.88607595, 0.98734177, 0.87341772,\n        0.98734177, 0.88607595, 1.        , 0.84810127, 1.        ,\n        0.97468354, 0.97468354, 0.83544304, 0.97468354, 0.86075949,\n        0.97468354, 0.75949367, 0.97468354, 0.82278481, 0.96202532,\n        0.7721519 , 0.96202532, 0.88607595, 0.98734177, 0.87341772,\n        0.98734177, 0.88607595, 1.        , 0.84810127, 1.        ]),\n 'split4_test_score': array([1.        , 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.87341772, 1.        , 0.87341772, 1.        , 0.81012658,\n        1.        , 0.84810127, 0.97468354, 0.84810127, 0.97468354,\n        1.        , 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.87341772, 1.        , 0.87341772, 1.        , 0.81012658,\n        1.        , 0.84810127, 0.97468354, 0.84810127, 0.97468354,\n        1.        , 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.87341772, 1.        , 0.87341772, 1.        , 0.81012658,\n        1.        , 0.84810127, 0.97468354, 0.84810127, 0.97468354,\n        1.        , 1.        , 0.91139241, 1.        , 0.91139241,\n        1.        , 0.84810127, 1.        , 0.88607595, 1.        ,\n        0.87341772, 1.        , 0.87341772, 1.        , 0.81012658,\n        1.        , 0.84810127, 0.97468354, 0.84810127, 0.97468354]),\n 'mean_test_score': array([0.98740506, 0.98740506, 0.89151899, 0.98740506, 0.90911392,\n        0.98740506, 0.81316456, 0.98740506, 0.8585443 , 0.98987342,\n        0.82822785, 0.98987342, 0.87373418, 0.99240506, 0.85351266,\n        0.99240506, 0.87626582, 0.98987342, 0.84341772, 0.99240506,\n        0.98740506, 0.98740506, 0.89151899, 0.98740506, 0.90911392,\n        0.98740506, 0.81316456, 0.98740506, 0.8585443 , 0.98987342,\n        0.82822785, 0.98987342, 0.87373418, 0.99240506, 0.85351266,\n        0.99240506, 0.87626582, 0.98987342, 0.84341772, 0.99240506,\n        0.98740506, 0.98740506, 0.89151899, 0.98740506, 0.90911392,\n        0.98740506, 0.81316456, 0.98740506, 0.8585443 , 0.98987342,\n        0.82822785, 0.98987342, 0.87373418, 0.99240506, 0.85351266,\n        0.99240506, 0.87626582, 0.98987342, 0.84341772, 0.99240506,\n        0.98740506, 0.98740506, 0.89151899, 0.98740506, 0.90911392,\n        0.98740506, 0.81316456, 0.98740506, 0.8585443 , 0.98987342,\n        0.82822785, 0.98987342, 0.87373418, 0.99240506, 0.85351266,\n        0.99240506, 0.87626582, 0.98987342, 0.84341772, 0.99240506]),\n 'std_test_score': array([0.01125159, 0.01125159, 0.04243736, 0.01125159, 0.03234567,\n        0.01125159, 0.03317905, 0.01125159, 0.02947628, 0.0147619 ,\n        0.05240506, 0.0147619 , 0.02887214, 0.01012658, 0.03896602,\n        0.01012658, 0.0352447 , 0.01240248, 0.02489394, 0.01012658,\n        0.01125159, 0.01125159, 0.04243736, 0.01125159, 0.03234567,\n        0.01125159, 0.03317905, 0.01125159, 0.02947628, 0.0147619 ,\n        0.05240506, 0.0147619 , 0.02887214, 0.01012658, 0.03896602,\n        0.01012658, 0.0352447 , 0.01240248, 0.02489394, 0.01012658,\n        0.01125159, 0.01125159, 0.04243736, 0.01125159, 0.03234567,\n        0.01125159, 0.03317905, 0.01125159, 0.02947628, 0.0147619 ,\n        0.05240506, 0.0147619 , 0.02887214, 0.01012658, 0.03896602,\n        0.01012658, 0.0352447 , 0.01240248, 0.02489394, 0.01012658,\n        0.01125159, 0.01125159, 0.04243736, 0.01125159, 0.03234567,\n        0.01125159, 0.03317905, 0.01125159, 0.02947628, 0.0147619 ,\n        0.05240506, 0.0147619 , 0.02887214, 0.01012658, 0.03896602,\n        0.01012658, 0.0352447 , 0.01240248, 0.02489394, 0.01012658]),\n 'rank_test_score': array([25, 25, 49, 25, 45, 25, 77, 25, 61, 13, 73, 13, 57,  1, 65,  1, 53,\n        13, 69,  1, 25, 25, 49, 25, 45, 25, 77, 25, 61, 13, 73, 13, 57,  1,\n        65,  1, 53, 13, 69,  1, 25, 25, 49, 25, 45, 25, 77, 25, 61, 13, 73,\n        13, 57,  1, 65,  1, 53, 13, 69,  1, 25, 25, 49, 25, 45, 25, 77, 25,\n        61, 13, 73, 13, 57,  1, 65,  1, 53, 13, 69,  1], dtype=int32)}"},"exec_count":70}},"pos":21.375,"start":1657218471404,"state":"done","type":"cell"}
{"end":1657218698569,"exec_count":86,"id":"0136f1","input":"clf1 = neighbors.KNeighborsClassifier(n_neighbors=7, weights = 'distance')","kernel":"ds_env","pos":24,"start":1657218698567,"state":"done","type":"cell"}
{"end":1657218735650,"exec_count":89,"id":"c8905b","input":"clf0 = GridSearchCV(clf1, parameters, scoring = 'recall')","kernel":"ds_env","pos":24.5,"start":1657218735637,"state":"done","type":"cell"}
{"end":1657218886230,"exec_count":93,"id":"02c499","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import DistanceMetric","kernel":"ds_env","pos":0,"start":1657218886226,"state":"done","type":"cell"}
{"end":1657219056703,"exec_count":95,"id":"e18fe5","input":"clf0.fit(x_train,y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-21 {color: black;background-color: white;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=KNeighborsClassifier(n_neighbors=7, weights='distance'),\n             param_grid={'algorithm': ('auto', 'ball_tree', 'kd_tree', 'brute'),\n                         'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         'p': [1, 2, 3, 4, 5],\n                         'weights': ('uniform', 'distance')},\n             scoring='recall')"},"exec_count":95}},"pos":24.625,"start":1657218994861,"state":"done","type":"cell"}
{"end":1657219056716,"exec_count":96,"id":"7b3947","input":"parameters = {'weights':('uniform', 'distance'), 'n_neighbors':[1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14, 15], 'algorithm':('auto', 'ball_tree', 'kd_tree', 'brute'), 'p':[1, 2, 3, 4, 5], 'metric': ('minkowski', 'euclidean', 'manhattan', 'chebyshev', 'wminkowski', 'seuclidean', 'mahalanobis') }","kernel":"ds_env","pos":17,"start":1657219056713,"state":"done","type":"cell"}
{"end":1657219056724,"exec_count":97,"id":"98596b","input":"clf = GridSearchCV(my_KNN_model, parameters, scoring = 'recall')","kernel":"ds_env","pos":18,"start":1657219056720,"state":"done","type":"cell"}
{"end":1657219192003,"exec_count":98,"id":"fb840c","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-22 {color: black;background-color: white;}#sk-container-id-22 pre{padding: 0;}#sk-container-id-22 div.sk-toggleable {background-color: white;}#sk-container-id-22 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-22 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-22 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-22 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-22 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-22 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-22 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-22 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-22 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-22 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-22 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-22 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-22 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-22 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-22 div.sk-item {position: relative;z-index: 1;}#sk-container-id-22 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-22 div.sk-item::before, #sk-container-id-22 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-22 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-22 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-22 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-22 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-22 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-22 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-22 div.sk-label-container {text-align: center;}#sk-container-id-22 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-22 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-22\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;metric&#x27;: (&#x27;minkowski&#x27;, &#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                    &#x27;chebyshev&#x27;, &#x27;wminkowski&#x27;, &#x27;seuclidean&#x27;,\n                                    &#x27;mahalanobis&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;),\n                         &#x27;metric&#x27;: (&#x27;minkowski&#x27;, &#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                    &#x27;chebyshev&#x27;, &#x27;wminkowski&#x27;, &#x27;seuclidean&#x27;,\n                                    &#x27;mahalanobis&#x27;),\n                         &#x27;n_neighbors&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         &#x27;p&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)},\n             scoring=&#x27;recall&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-41\" type=\"checkbox\" ><label for=\"sk-estimator-id-41\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-42\" type=\"checkbox\" ><label for=\"sk-estimator-id-42\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={'algorithm': ('auto', 'ball_tree', 'kd_tree', 'brute'),\n                         'metric': ('minkowski', 'euclidean', 'manhattan',\n                                    'chebyshev', 'wminkowski', 'seuclidean',\n                                    'mahalanobis'),\n                         'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n                                         13, 14, 15],\n                         'p': [1, 2, 3, 4, 5],\n                         'weights': ('uniform', 'distance')},\n             scoring='recall')"},"exec_count":98}},"pos":19,"start":1657219056728,"state":"done","type":"cell"}
{"end":1657219192016,"exec_count":99,"id":"14a621","input":"clf0.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9974683544303797"},"exec_count":99}},"pos":24.75,"start":1657219192010,"state":"done","type":"cell"}
{"end":1657219203321,"exec_count":100,"id":"b26dde","input":"clf.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9974683544303797"},"exec_count":100}},"pos":20,"start":1657219203313,"state":"done","type":"cell"}
{"end":1657219205479,"exec_count":101,"id":"684dd5","input":"clf.best_estimator_","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-23 {color: black;background-color: white;}#sk-container-id-23 pre{padding: 0;}#sk-container-id-23 div.sk-toggleable {background-color: white;}#sk-container-id-23 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-23 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-23 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-23 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-23 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-23 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-23 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-23 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-23 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-23 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-23 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-23 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-23 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-23 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-23 div.sk-item {position: relative;z-index: 1;}#sk-container-id-23 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-23 div.sk-item::before, #sk-container-id-23 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-23 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-23 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-23 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-23 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-23 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-23 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-23 div.sk-label-container {text-align: center;}#sk-container-id-23 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-23 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-23\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-43\" type=\"checkbox\" checked><label for=\"sk-estimator-id-43\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=1, p=3)"},"exec_count":101}},"pos":21,"start":1657219205470,"state":"done","type":"cell"}
{"end":1657219565241,"exec_count":103,"id":"766581","input":"clf0.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'algorithm': 'auto', 'n_neighbors': 1, 'p': 3, 'weights': 'uniform'}"},"exec_count":103}},"pos":24.875,"scrolled":true,"start":1657219565234,"state":"done","type":"cell"}
{"end":1657219770560,"exec_count":104,"id":"d496b7","input":"KNN_model_2 = KNN(n_neighbors = 7, weights = 'distance')\nKNN_model_2.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-24 {color: black;background-color: white;}#sk-container-id-24 pre{padding: 0;}#sk-container-id-24 div.sk-toggleable {background-color: white;}#sk-container-id-24 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-24 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-24 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-24 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-24 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-24 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-24 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-24 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-24 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-24 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-24 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-24 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-24 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-24 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-24 div.sk-item {position: relative;z-index: 1;}#sk-container-id-24 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-24 div.sk-item::before, #sk-container-id-24 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-24 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-24 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-24 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-24 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-24 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-24 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-24 div.sk-label-container {text-align: center;}#sk-container-id-24 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-24 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-24\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-44\" type=\"checkbox\" checked><label for=\"sk-estimator-id-44\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7, weights=&#x27;distance&#x27;)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7, weights='distance')"},"exec_count":104}},"pos":21.5,"start":1657219770547,"state":"done","type":"cell"}
{"end":1657219777748,"exec_count":105,"id":"5676fe","input":"y_hat_KNN_2 = KNN_model_2.predict(x_test)","kernel":"ds_env","pos":21.75,"start":1657219777738,"state":"done","type":"cell"}
{"end":1657219784433,"exec_count":106,"id":"74c32a","input":"sns.heatmap(confusion_matrix(y_test, y_hat_KNN_2), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":106},"1":{"data":{"image/png":"894048e4d7e1be6ac103a7d61f33b6343d105dc7","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":21.875,"start":1657219784276,"state":"done","type":"cell"}
{"end":1657219838102,"exec_count":107,"id":"150580","input":"print(81 / (81 + 6))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.9310344827586207\n"}},"pos":22,"start":1657219838092,"state":"done","type":"cell"}
{"end":1657219852979,"exec_count":109,"id":"3a02e0","input":"clf0.best_estimator_","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-25 {color: black;background-color: white;}#sk-container-id-25 pre{padding: 0;}#sk-container-id-25 div.sk-toggleable {background-color: white;}#sk-container-id-25 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-25 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-25 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-25 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-25 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-25 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-25 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-25 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-25 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-25 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-25 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-25 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-25 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-25 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-25 div.sk-item {position: relative;z-index: 1;}#sk-container-id-25 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-25 div.sk-item::before, #sk-container-id-25 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-25 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-25 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-25 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-25 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-25 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-25 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-25 div.sk-label-container {text-align: center;}#sk-container-id-25 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-25 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-25\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-45\" type=\"checkbox\" checked><label for=\"sk-estimator-id-45\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=1, p=3)"},"exec_count":109}},"pos":24.9375,"start":1657219852962,"state":"done","type":"cell"}
{"end":1657219953613,"exec_count":117,"id":"de8482","input":"KNN_2.fit(x_train,y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-28 {color: black;background-color: white;}#sk-container-id-28 pre{padding: 0;}#sk-container-id-28 div.sk-toggleable {background-color: white;}#sk-container-id-28 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-28 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-28 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-28 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-28 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-28 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-28 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-28 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-28 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-28 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-28 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-28 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-28 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-28 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-28 div.sk-item {position: relative;z-index: 1;}#sk-container-id-28 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-28 div.sk-item::before, #sk-container-id-28 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-28 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-28 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-28 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-28 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-28 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-28 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-28 div.sk-label-container {text-align: center;}#sk-container-id-28 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-28 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-28\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-48\" type=\"checkbox\" checked><label for=\"sk-estimator-id-48\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=1, p=3)"},"exec_count":117}},"pos":25.75,"start":1657219953596,"state":"done","type":"cell"}
{"end":1657219987562,"exec_count":120,"id":"4b9cc5","input":"KNN_2hat = KNN_2.predict(x_test)\nKNN_2hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"},"exec_count":120}},"pos":25.875,"start":1657219987546,"state":"done","type":"cell"}
{"end":1657220023744,"exec_count":126,"id":"f74038","input":"np.array(y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1])"},"exec_count":126}},"pos":25.9375,"start":1657220023737,"state":"done","type":"cell"}
{"end":1657220050174,"exec_count":127,"id":"a701f2","input":"KNN_model_3 = KNN(n_neighbors = 1, p = 3)\nKNN_model_3.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-30 {color: black;background-color: white;}#sk-container-id-30 pre{padding: 0;}#sk-container-id-30 div.sk-toggleable {background-color: white;}#sk-container-id-30 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-30 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-30 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-30 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-30 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-30 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-30 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-30 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-30 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-30 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-30 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-30 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-30 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-30 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-30 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-30 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-30 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-30 div.sk-item {position: relative;z-index: 1;}#sk-container-id-30 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-30 div.sk-item::before, #sk-container-id-30 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-30 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-30 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-30 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-30 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-30 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-30 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-30 div.sk-label-container {text-align: center;}#sk-container-id-30 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-30 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-30\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-50\" type=\"checkbox\" checked><label for=\"sk-estimator-id-50\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1, p=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=1, p=3)"},"exec_count":127}},"pos":22.5,"start":1657220050163,"state":"done","type":"cell"}
{"end":1657220053057,"exec_count":128,"id":"974290","input":"y_hat_KNN_3 = KNN_model_3.predict(x_test)","kernel":"ds_env","pos":22.75,"start":1657220053040,"state":"done","type":"cell"}
{"end":1657220054918,"exec_count":129,"id":"637661","input":"sns.heatmap(confusion_matrix(y_test, y_hat_KNN_3), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":129},"1":{"data":{"image/png":"894048e4d7e1be6ac103a7d61f33b6343d105dc7","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":22.875,"start":1657220054761,"state":"done","type":"cell"}
{"end":1657220094265,"exec_count":131,"id":"338448","input":"sns.heatmap(confusion_matrix(y_test, KNN_2hat),annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":131},"1":{"data":{"image/png":"894048e4d7e1be6ac103a7d61f33b6343d105dc7","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":25.96875,"scrolled":true,"start":1657220093433,"state":"done","type":"cell"}
{"end":1657224370250,"exec_count":134,"id":"5ef3c3","input":"#accuracy\n\naccuracyKNN_2 = (81 + 102)/(81+102+0+6)\naccuracyKNN_2","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9682539682539683"},"exec_count":134}},"pos":25.984375,"start":1657224370243,"state":"done","type":"cell"}
{"end":1657224692295,"exec_count":137,"id":"368014","input":"recall_score(y_test,KNN_2hat)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9444444444444444"},"exec_count":137}},"pos":25.9921875,"start":1657224692290,"state":"done","type":"cell"}
{"end":1657224709448,"exec_count":138,"id":"de9e76","input":"recall_score(y_test, y_hat_KNN_3)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9444444444444444"},"exec_count":138}},"pos":29,"start":1657224709443,"state":"done","type":"cell"}
{"end":1657224990670,"exec_count":144,"id":"0b2f2b","input":"from sklearn.neighbors import KNeighborsClassifier as KNN #K-Nearest Neighbors\nmy_KNN_model = KNN(n_neighbors = 3)","kernel":"ds_env","pos":10,"start":1657224990666,"state":"done","type":"cell"}
{"end":1657224993710,"exec_count":146,"id":"8a8dd1","input":"my_KNN_model.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-33 {color: black;background-color: white;}#sk-container-id-33 pre{padding: 0;}#sk-container-id-33 div.sk-toggleable {background-color: white;}#sk-container-id-33 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-33 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-33 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-33 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-33 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-33 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-33 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-33 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-33 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-33 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-33 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-33 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-33 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-33 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-33 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-33 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-33 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-33 div.sk-item {position: relative;z-index: 1;}#sk-container-id-33 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-33 div.sk-item::before, #sk-container-id-33 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-33 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-33 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-33 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-33 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-33 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-33 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-33 div.sk-label-container {text-align: center;}#sk-container-id-33 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-33 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-33\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-53\" type=\"checkbox\" checked><label for=\"sk-estimator-id-53\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=3)"},"exec_count":146}},"pos":11,"start":1657224993704,"state":"done","type":"cell"}
{"end":1657224995554,"exec_count":147,"id":"e82c7d","input":"y_hat_KNN = my_KNN_model.predict(x_test)","kernel":"ds_env","pos":12,"start":1657224995537,"state":"done","type":"cell"}
{"end":1657225001664,"exec_count":148,"id":"3f3bcd","input":"total_squared_error_KNN = (np.sum((y_test - y_hat_KNN)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error_KNN = total_squared_error_KNN/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error_KNN)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.026455026455026454\n"}},"pos":13,"start":1657225001653,"state":"done","type":"cell"}
{"end":1657225003946,"exec_count":149,"id":"c6d65f","input":"recall_score(y_test,y_hat_KNN)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9814814814814815"},"exec_count":149}},"pos":13.5,"start":1657225003941,"state":"done","type":"cell"}
{"end":1657225025893,"exec_count":153,"id":"5ef99d","input":"recall_score(y_test, y_hat_KNN)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9814814814814815"},"exec_count":153}},"pos":30,"start":1657225025881,"state":"done","type":"cell"}
{"end":1657225075805,"exec_count":157,"id":"11b3fb","input":"recall_score(y_test, KNN3_yhat)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9814814814814815"},"exec_count":157}},"pos":30.5,"start":1657225075787,"state":"done","type":"cell"}
{"end":1657225175995,"exec_count":158,"id":"815996","input":"clf.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'algorithm': 'auto',\n 'metric': 'minkowski',\n 'n_neighbors': 1,\n 'p': 3,\n 'weights': 'uniform'}"},"exec_count":158}},"pos":21.25,"start":1657225175978,"state":"done","type":"cell"}
{"end":1657225397102,"exec_count":163,"id":"92ad4b","input":"KNN_3 = KNN(n_neighbors = 3)","kernel":"ds_env","pos":31,"start":1657225397099,"state":"done","type":"cell"}
{"end":1657225398834,"exec_count":164,"id":"7e01f4","input":"KNN_3.fit(x_train,y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-36 {color: black;background-color: white;}#sk-container-id-36 pre{padding: 0;}#sk-container-id-36 div.sk-toggleable {background-color: white;}#sk-container-id-36 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-36 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-36 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-36 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-36 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-36 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-36 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-36 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-36 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-36 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-36 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-36 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-36 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-36 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-36 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-36 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-36 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-36 div.sk-item {position: relative;z-index: 1;}#sk-container-id-36 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-36 div.sk-item::before, #sk-container-id-36 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-36 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-36 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-36 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-36 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-36 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-36 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-36 div.sk-label-container {text-align: center;}#sk-container-id-36 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-36 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-36\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-56\" type=\"checkbox\" checked><label for=\"sk-estimator-id-56\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=3)"},"exec_count":164}},"pos":32,"start":1657225398830,"state":"done","type":"cell"}
{"end":1657225400357,"exec_count":165,"id":"a299ac","input":"KNN3_yhat = KNN_3.predict(x_test)","kernel":"ds_env","pos":33,"start":1657225400344,"state":"done","type":"cell"}
{"end":1657225402230,"exec_count":166,"id":"c5f6ec","input":"recall_score(y_test, KNN3_yhat)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9814814814814815"},"exec_count":166}},"pos":34,"start":1657225402222,"state":"done","type":"cell"}
{"id":"0ac9a7","input":"","pos":35,"type":"cell"}
{"id":"16f525","input":"","pos":34.75,"type":"cell"}
{"id":"96a5a1","input":"recall_score(#correct values ,#pred values)","pos":28,"type":"cell"}
{"id":"bffe38","input":"","pos":23.5,"type":"cell"}
{"id":"f7cb65","input":"","pos":17.5,"type":"cell"}
{"id":0,"time":1657225827737,"type":"user"}
{"last_load":1657215031570,"type":"file"}