{"backend_state":"init","connection_file":"/projects/789aa3e5-de8c-43a9-9498-6199f18e94f7/.local/share/jupyter/runtime/kernel-15e60137-e586-4ad4-b7b4-cad6a344d811.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"linear_regression_numpy_tutorial.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"124daf","input":"","metadata":{"id":"owTTVO4Ba-sY"},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1fb606","input":"","metadata":{"id":"cvxyHdHha-sa"},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"25650b","input":"","metadata":{"id":"7ubqNNVxa-sZ"},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6c6955","input":"","metadata":{"id":"l5xP_R3ya-sZ"},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6d9fc3","input":"","metadata":{"id":"ox6WlPb7a-sa"},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"75a71b","input":"","metadata":{"id":"bUuZFIRxa-sZ"},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b7c9c6","input":"","metadata":{"id":"8vkl-uJMa-sZ"},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fd35c3","input":"","metadata":{"id":"VPv4Rha8a-sa"},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe3fc1","input":"","metadata":{"id":"mdxlUKLka-sZ"},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"d1d324","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1627498066861,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IecuRdF1a-sG"},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"dfc0b3","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42) # Why 42 (It works well for computer science) - https://medium.com/@leticia.b/the-story-of-seed-42-874953452b94\n\n# randomly generate x which is a vector of 100 points \nx = np.random.rand(100, 1)\n\n# define exact linear function y = 1 + 2x + epsilon where epsilon (0.1*random numbers)\n\n# Have const val 1 and 2 * x, which are wts of lin reg. Then have array of 100 rand #s btwn 0-1\ny = 1 + 2 * x + .1 * np.random.randn(100, 1)","metadata":{"executionInfo":{"elapsed":219,"status":"ok","timestamp":1627498568931,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"BYHvay0xa-sK"},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"f659d2","input":"x","output":{"0":{"data":{"text/plain":"array([[0.37454012],\n       [0.95071431],\n       [0.73199394],\n       [0.59865848],\n       [0.15601864],\n       [0.15599452],\n       [0.05808361],\n       [0.86617615],\n       [0.60111501],\n       [0.70807258],\n       [0.02058449],\n       [0.96990985],\n       [0.83244264],\n       [0.21233911],\n       [0.18182497],\n       [0.18340451],\n       [0.30424224],\n       [0.52475643],\n       [0.43194502],\n       [0.29122914],\n       [0.61185289],\n       [0.13949386],\n       [0.29214465],\n       [0.36636184],\n       [0.45606998],\n       [0.78517596],\n       [0.19967378],\n       [0.51423444],\n       [0.59241457],\n       [0.04645041],\n       [0.60754485],\n       [0.17052412],\n       [0.06505159],\n       [0.94888554],\n       [0.96563203],\n       [0.80839735],\n       [0.30461377],\n       [0.09767211],\n       [0.68423303],\n       [0.44015249],\n       [0.12203823],\n       [0.49517691],\n       [0.03438852],\n       [0.9093204 ],\n       [0.25877998],\n       [0.66252228],\n       [0.31171108],\n       [0.52006802],\n       [0.54671028],\n       [0.18485446],\n       [0.96958463],\n       [0.77513282],\n       [0.93949894],\n       [0.89482735],\n       [0.59789998],\n       [0.92187424],\n       [0.0884925 ],\n       [0.19598286],\n       [0.04522729],\n       [0.32533033],\n       [0.38867729],\n       [0.27134903],\n       [0.82873751],\n       [0.35675333],\n       [0.28093451],\n       [0.54269608],\n       [0.14092422],\n       [0.80219698],\n       [0.07455064],\n       [0.98688694],\n       [0.77224477],\n       [0.19871568],\n       [0.00552212],\n       [0.81546143],\n       [0.70685734],\n       [0.72900717],\n       [0.77127035],\n       [0.07404465],\n       [0.35846573],\n       [0.11586906],\n       [0.86310343],\n       [0.62329813],\n       [0.33089802],\n       [0.06355835],\n       [0.31098232],\n       [0.32518332],\n       [0.72960618],\n       [0.63755747],\n       [0.88721274],\n       [0.47221493],\n       [0.11959425],\n       [0.71324479],\n       [0.76078505],\n       [0.5612772 ],\n       [0.77096718],\n       [0.4937956 ],\n       [0.52273283],\n       [0.42754102],\n       [0.02541913],\n       [0.10789143]])"},"exec_count":26,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"e85d76","input":"# Shuffles the indices\nidx = np.arange(100)\nnp.random.shuffle(idx)\n\n# Uses first 80 random indices for train\ntrain_idx = idx[:80]\n\n# Uses the remaining indices for validation\nval_idx = idx[80:]\n\n# Generates train and validation sets\n\n# Model won't do well on data set it hasn't seen before, don't want overfitting data, not learning exact data\nx_train, y_train = x[train_idx], y[train_idx]\nx_val, y_val = x[val_idx], y[val_idx]\n","metadata":{"executionInfo":{"elapsed":235,"status":"ok","timestamp":1627498579768,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"_ntl2sX3a-sL"},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"4cf297","input":"indx = np.arrange(100)\nnp.random.shuffle(indx)\nindx","output":{"0":{"ename":"AttributeError","evalue":"module 'numpy' has no attribute 'arrange'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-73877faf2632>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mindx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mindx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/numpy/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(attr)\u001b[0m\n\u001b[1;32m    313\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mTester\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 315\u001b[0;31m         raise AttributeError(\"module {!r} has no attribute \"\n\u001b[0m\u001b[1;32m    316\u001b[0m                              \"{!r}\".format(__name__, attr))\n\u001b[1;32m    317\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'numpy' has no attribute 'arrange'"]}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"40cf94","input":"plt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the validation set \nplt.subplot(1,2,2)\nplt.scatter(x_val,x_val)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()\n\n# Graph trends = perfect positive","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":524,"status":"ok","timestamp":1627498583872,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"W1JhyZ_Na-sM","outputId":"909f5fd9-c203-45cf-d41f-58b09bb727ef"},"output":{"0":{"data":{"image/png":"c6f83e5e3f352ba510dd00f5ea1f95e01eb68f8f","text/plain":"<Figure size 720x360 with 2 Axes>"},"exec_count":29,"metadata":{"image/png":{"height":342,"width":621},"needs_background":"light"},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"73675c","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42)\n\n# Initializes parameters \"a\" and \"b\" randomly - they don't need to be good yet\na = np.random.randn(1)\nb = np.random.randn(1)\n\n# print values of a and b \nprint(a, b)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":241,"status":"ok","timestamp":1627498594869,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"MjeQPrOKa-sP","outputId":"fe881c09-932e-46f0-9f40-79b6b5c69617"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[0.49671415] [-0.1382643]\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"176b11","input":"# Initialization of hyper-parameters (in our case, only learning rate and number of epochs/iterations)\n\n# Sets learning rate (how much the AI conforms to each set of feedbacks)\nlr = 1e-1\n# Defines number of epochs (how many times training is repeated)\nn_epochs = 1000","metadata":{"executionInfo":{"elapsed":240,"status":"ok","timestamp":1627498605594,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"xaIPfjB1a-sP"},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"a72992","input":"for epoch in range(n_epochs):\n    # Computes our model's predicted output\n    yhat = a + b * x_train\n    \n    # How wrong is our model? That's the error! \n    error = (y_train - yhat)\n    \n    # It is a regression, so it computes mean squared error (MSE)\n    loss = (error ** 2).mean()\n    \n    # Computes gradients for both \"a\" and \"b\" parameters\n    a_grad = -2 * error.mean()\n    b_grad = -2 * (x_train * error).mean()\n    \n    # Updates parameters using gradients and the learning rate\n    a = a - lr * a_grad\n    b = b - lr * b_grad\n    \nprint(a, b)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":230,"status":"ok","timestamp":1627499222901,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IEGhbnhoa-sQ","outputId":"6df14990-801c-4030-bd27-e2c19b95c577"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02354094] [1.96896411]\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"b8fd38","input":"plt.figure(figsize=(10,5))\ny_vals = b + a * x_val\nplt.plot(x_val, y_vals, '--')\n\nplt.scatter(x_val,y_val, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":229,"status":"ok","timestamp":1627499225902,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"V9wnGeT_eou8","outputId":"1dc573e8-ebd4-4861-94e0-ff1a6d4229d3"},"output":{"0":{"data":{"image/png":"f8d7a4420887c97d2cdf014bdefefbb57e889166","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":33,"metadata":{"image/png":{"height":342,"width":625},"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"59f5ff","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":885,"status":"ok","timestamp":1627498630865,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"jkPf0bt4a-sV","outputId":"422ab4c2-fceb-490e-ca2d-b45f09b26cff"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02354075] [1.96896447]\n"}},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"3f93bf","input":"### For each epoch, there are 5 training steps:\n* Compute model’s predictions \n* Compute the error (the difference between the actual value and predicted value) \n* Compute the loss ( mean square error = the average of (error)^2)\n* Compute the gradients for every parameter (require calculus)\n* Update the parameters a and b","metadata":{"id":"Tmk5nl_Va-sQ"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"4a10d2","input":"## linear regression using numpy \n\n","metadata":{"id":"gi4pQP8Ia-sO"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"7d553c","input":"## The results!\n\nThey match up to 6 decimal places — we have a fully working implementation of linear regression using Numpy.","metadata":{"id":"yE4V3P9aa-sX"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"8c1946","input":"## plot the train and validation sets","metadata":{"id":"DCCwyhkya-sM"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"aacaeb","input":"# Linear regression using NumPy","metadata":{"id":"K_X2fB9ta-rv"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"cae0cc","input":"## Data Generation","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"d37305","input":"## check our results use Scikit-learn's linear regression\n\nJust to make sure we haven’t done any mistakes in our code, we can use Scikit-Learn’s Linear Regression to fit the model and compare the coefficients.\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"dce07e","input":"## split data into train and validation sets (80/20)","metadata":{"id":"irEOBQoca-sL"},"pos":5,"type":"cell"}
{"id":0,"time":1657042811168,"type":"user"}
{"last_load":1657051401686,"type":"file"}